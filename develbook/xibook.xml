<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<book xmlns:xi="http://www.w3.org/2001/XInclude" lang="en">

  <!-- bookinfo -->
  <bookinfo xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>gDesklets Developer's Book</title>

  <authorgroup>
    <author>
      <firstname>Martin</firstname>
      <surname>Grimme</surname>
      <address><email>martin@pycage.de</email></address>
    </author>
    <author>
      <firstname>Joe</firstname>
      <surname>Sapp</surname>
      <address><email>nixphoeni@gmail.com</email></address>
    </author>
    <author>
      <firstname>Björn</firstname>
      <surname>Koch</surname>
      <address><email>H.Humpel@gmx.de</email></address>
    </author>
    <author>
      <firstname>Robert</firstname>
      <surname>Pastierovič</surname>
      <address><email>pastierovic@gmail.com</email></address>
    </author>
  </authorgroup>

  <edition>Developer's Book for gDesklets v0.36.3(beta)</edition>
  <pubdate>2010</pubdate>

  <copyright>
    <year>2004</year>
    <year>2005</year>
    <year>2006</year>
    <year>2007</year>
    <year>2008</year>
    <year>2010</year>
    <holder>The gDesklets Team</holder>
  </copyright>

  <releaseinfo>
    This book describes version 0.36.3(beta) of the gDesklets platform.
  </releaseinfo>

  <legalnotice>
    <para>
      This document can be freely redistributed according to the terms
      of the GNU FDL.
    </para>
  </legalnotice>

<!-- <xi:include href="history.xml"/> -->

</bookinfo>

  <!--
    Administration
      Files and Directories
      Transferring Configuration
      Installing Desklets Manually
      Removing Desklets Manually
      Uninstalling Desklets Manually
 
  -->

  <!-- preface -->
  <preface xmlns:xi="http://www.w3.org/2001/XInclude" id="preface">
  <title>Preface</title>

  <para>Any good development platform is worthless without documentation.
    This book attempts to explain the <application>gDesklets</application>
    platform in detail, and is designed for developers who wish to create
    their own applets.</para>

  <para>Due to the nature of an evolving project, a documentation book will
    always be a work-in-progress. This book will continually be revised and
    extended to reflect the latest state of the
    <application>gDesklets</application> development platform.
    Any suggestions or help from the readers is highly appreciated, and
    would greatly aid to make this book a comprehensive and up-to-date
    source of information for applet developers.</para>

  <para>If you find some passages to be hard to read or totally incomprehensible,
    please do not curse about them. Instead, let us know what's bad. That way
    you can help us to make it better.</para>

  <para>Now let's start with the documentation. We wish you will have as much
    fun developing on the <application>gDesklets</application> platform,
    as we are having developing it for you!</para>

  <para>December 2004, The gDesklets Team</para>

</preface>

  <!-- chapters -->
  <chapter xmlns:xi="http://www.w3.org/2001/XInclude" id="admin">
  <title>Administration</title>

  <section id="admin-filedir"><title>Files and Directories</title>

  <warning>
    <para>These files are required for proper operation of the
      <application>gDesklets</application> platform. Manual changes can lead to
      unexpected behavior.</para>
  </warning>

  <para><application>gDesklets</application> uses the following files and
    directories for storing data.</para>

  <para>The term <filename>$GDESKLETS</filename> denotes the path of the
    gDesklets installation,
    e.g. <filename>/usr/lib/gdesklets</filename>.</para>

  <informaltable frame="topbot">
  <tgroup>
  <thead>
    <row>
      <entry>Path</entry>
      <entry>Function</entry>
    </row>
  </thead>

  <tbody>
    <row>
      <entry>$GDESKLETS/Controls/</entry>
      <entry>Contains controls installed systemwide.</entry>
    </row>
    <row>
      <entry>$GDESKLETS/Displays/</entry>
      <entry>Contains desklets installed systemwide.</entry>
    </row>
    <row>
      <entry>$GDESKLETS/Sensors/</entry>
      <entry>Contains sensors installed systemwide. Sensors are
        deprecated.</entry>
    </row>
    <row>
      <entry>~/.gdesklets/Controls/</entry>
      <entry>Contains controls installed by the user.</entry>
    </row>
    <row>
      <entry>~/.gdesklets/Displays/</entry>
      <entry>Contains desklets installed by the user.</entry>
    </row>
    <row>
      <entry>~/.gdesklets/Sensors/</entry>
      <entry>Contains sensors installed by the user. Sensors are
        deprecated.</entry>
    </row>
    <row>
      <entry>~/.gdesklets/gdesklets:X.Y.log</entry>
      <entry>Logfile of the gdesklets-daemon on X display :X.Y.</entry>
    </row>
    <row>
      <entry>~/.gdesklets/gdesklets:X.Y.pid</entry>
      <entry>Process ID of the gdesklets-daemon on X display :X.Y. This file is
        used internally.</entry>
    </row>
    <row>
      <entry>~/.gdesklets/displays</entry>
      <entry>Configuration file containing the current profile along with the 
        currently opened display files for each profile.</entry>
    </row>
    <row>
      <entry>~/.gdesklets/positions</entry>
      <entry>Configuration file storing the screen positions of all open
        desklets.</entry>
    </row>
    <row>
      <entry>~/.gdesklets/sockets/</entry>
      <entry>Contains a communication socket for each running
        gdesklets-daemon.</entry>
    </row>
    <row>
      <entry>gconf:/apps/gdesklets/</entry>
      <entry>Contains the configurations of the individual desklets in GConf.
        </entry>
    </row>

  </tbody>
  </tgroup>
  </informaltable>


</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="admin-displays">
  <title>The displays File</title>

  <para>This file contains the current profile and the currently loaded displays
    for all profiles.</para>


  <section><title>File Format</title>

    <para>The file is in ASCII format where each entry takes one line.</para>

    <para>The first entry contains the name of the currently active profile.
      </para>

    <para>The following entries each contain a triple consisting of the unique
      display ID, the path of the display file, and the name of the profile
      which contains the display. The three values are separated by spaces.
      </para>

  </section>



  <section><title>Grammar</title>

    <programlisting>
S             %;rarr; PROFILE_ENTRY BODY
PROFILE_ENTRY %;rarr; PROFILE '\n'
BODY          %;rarr; LINE BODY | %;epsilon;
LINE          %;rarr; ID PATH PROFILE '\n'
ID            %;rarr; &lt;string&gt;
PATH          %;rarr; &lt;string&gt;
PROFILE       %;rarr; &lt;string&gt;
    </programlisting>

  </section>

</section>

</chapter>
  <chapter xmlns:xi="http://www.w3.org/2001/XInclude" id="framework">
  <title>Framework</title>

  <para>This chapter describes the framework of the
    <application>gDesklets</application> platform. You will learn about the
    framework's components and how they interact.</para>

  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="framework-overview">
  <title>Overview</title>

  <para>The <application>gDesklets</application> framework consists of several
    components, as can be seen below.</para>

  <figure><title>The gDesklets Framework</title>
    <screenshot>
      <mediaobject>
        <imageobject>
          <imagedata fileref="gfx/framework.png" format="PNG"/>
        </imageobject>
        <textobject>
          <phrase>Framework</phrase>
        </textobject>
      </mediaobject>
    </screenshot>
  </figure>

  <itemizedlist>
    <listitem>
      <para>A daemon is running in the background as a server
        providing a socket for communication. Clients connect to the socket to
        give instructions to the daemon, e.g. to have it open an applet.
      </para>
      <para>The daemon is responsible for loading and running the applets.
        Clients, e.g. a command line frontend, can thus be implemented as thin
        remote controls.
      </para>
    </listitem>

    <listitem><para>The user interface of applets, i.e. the things which the
      user will see and be able to interact with, is defined by
      <link linkend="dsp">ADL</link>, a simple, yet powerful XML based language.
      </para></listitem>

    <listitem><para>The XML-defined user interface can be brought to life
      with <link linkend="script">inline scripts</link>, i.e. Python scripts
      which are directly written into the XML code or imported there to be
      executed in a <link linkend="script-sandbox">secure sandbox</link>.
      </para></listitem>

    <listitem><para>Sandboxed scripting code can use
      <link linkend="ctrl">controls</link> to access
      otherwise unreachable data. Controls can, for instance, be used for
      reading hardware information. Basically they provide a controlled way
      to access data outside the sandbox.
      <link linkend="libdesklets"><application>libdesklets</application></link>
      is a library which can be used to ease their implementation.</para>
      </listitem>

  </itemizedlist>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="framework-daemon">
  <title>Daemon and Clients</title>

  <para>About the communication between daemon and clients.
    To be written...</para>

</section>

</chapter>
  <chapter xmlns:xi="http://www.w3.org/2001/XInclude" id="meta">
  <title>Meta-Data</title>

<section id="meta-tag"><title>&lt;meta&gt;</title>

  <para>The <literal>meta</literal> tag contains information about your
    desklet shown in the shell.</para>

  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">author</entry>
        <entry valign="top">The name of the person(s) who wrote the
          desklet.</entry>
      </row>
      <row>
        <entry valign="top">category</entry>
        <entry valign="top">The category in which the desklet should
          be.</entry>
      </row>
      <row>
        <entry valign="top">dependency</entry>
        <entry valign="top">The minimum version of <application>gDesklets</application>
          on which the desklet is dependent.</entry>
      </row>
      <row>
        <entry valign="top">description</entry>
        <entry valign="top">A short description of the desklet.</entry>
      </row>
      <row>
        <entry valign="top">name</entry>
        <entry valign="top">The name of the desklet.</entry>
      </row>
      <row>
        <entry valign="top">preview</entry>
        <entry valign="top">Path to an image representing the display.  This
          could be an icon or an actual screenshot, for example.</entry>
      </row>
      <row>
        <entry valign="top">version</entry>
        <entry valign="top">The version of the desklet.</entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>

  <programlisting><![CDATA[
<display>

  <meta author="George D. Esklet"
        version="0.1"
        name="MyFirstDesklet"
        category="misc/utilities"
        description="A display to show off my Python-writing skills."
        dependency="0.33.1"
        preview="gfx/icon.png"/>

</display>
  ]]></programlisting>

  <warning>
    <para>The meta tag <literal>name</literal> should start with a letter or a number!</para>
  </warning>

</section>

</chapter>
  <chapter xmlns:xi="http://www.w3.org/2001/XInclude" id="dsp">
  <title>ADL</title>

  <para>This chapter describes the <acronym>ADL</acronym>, the
    Applet Description Language of <application>gDesklets</application>.
    </para>

  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="dsp-about">
  <title>About ADL</title>

  <para>The ADL (Applet Description Language) is the language for describing
    the user interface of applets
    in <application>gDesklets</application>. It is based on XML and was
    carefully designed to be flexible, yet not too verbose. One major goal
    of the language is to be human-readable.</para>

  <para>In the ADL, a display is setup by composing display elements together.
    Each display element is represented by an ADL tag and is configurable
    through properties.</para>

  <programlisting><![CDATA[
<display>

  <label value="Hello World!" font="Sans 3cm" color="red"/>

</display>
  ]]></programlisting>

  <para>ADL further supports inline scripting to bring displays to life.
    Inline scripts are able to modify properties of display elements at
    run-time.</para>

  <para>Features of the ADL:</para>

  <itemizedlist>
    <listitem>Human-readable and human-editable</listitem>
    <listitem>Not too verbose</listitem>
    <listitem>XML-based</listitem>
    <listitem>Intuitive design</listitem>
    <listitem>Independent of screen resolution</listitem>
    <listitem>Rich layouting capabilities</listitem>
    <listitem>Inline scripting</listitem>
    <listitem>Specially designed for the purpose of making applets</listitem>
    <listitem>Accessibility support (planned)</listitem>
  </itemizedlist>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="dsp-tag-common">
  <title id="dsp-tag-common-title">Common Tag Attributes and Handlers</title>

  <para>The display tags, i.e. the tags representing visible display elements,
    support a set of common attributes and action handlers.</para>



  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">anchor</entry>
        <entry valign="top">direction</entry>
        <entry valign="top">nw</entry>
        <entry valign="top"><link linkend="layout-anchors">Positioning anchor</link>
          of the element. It determines which point is used for positioning using the
          <parameter>x, y</parameter> properties.</entry>
      </row>
      <row>
        <entry valign="top">cursor</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top"><emphasis>[New in 0.35]</emphasis> The
          <link linkend="apdx-cursors">name of the mouse cursor</link> which will be displayed
          when the mouse pointer enters the element. Set this property to an empty string
          in order to revert that setting.</entry>
      </row>
      <row>
        <entry valign="top">index-path</entry>
        <entry valign="top">integer list</entry>
        <entry valign="top"/>
        <entry valign="top">Read-only property for retrieving the index of the
          element with in an <link linkend="dsp-tag-array">array</link>.
          This is a list because arrays can be nested, thus requiring multiple
          indexes to address an element.</entry>
      </row>
      <row>
        <entry valign="top">menu</entry>
        <entry valign="top">object</entry>
        <entry valign="top"/>
        <entry valign="top"><emphasis>[New in 0.35]</emphasis> The menu to be displayed.
          Whenever you assign a menu (a list of MenuItem objects) to this property,
          it will immediately popup.</entry>
      </row>
      <row>
        <entry valign="top">relative-to</entry>
        <entry valign="top">string list</entry>
        <entry valign="top"/>
        <entry valign="top">
          <para>Usage: <userinput>relative-to="id, dir"</userinput></para>
          Places the element relative to the element with
          ID <parameter>id</parameter>.</entry>
      </row>
      <row>
        <entry valign="top">x</entry>
        <entry valign="top">unit</entry>
        <entry valign="top">0</entry>
        <entry valign="top">X coordinate of the element.</entry>
      </row>
      <row>
        <entry valign="top">y</entry>
        <entry valign="top">unit</entry>
        <entry valign="top">0</entry>
        <entry valign="top">Y coordinate of the element.</entry>
      </row>
      <row>
        <entry valign="top">width</entry>
        <entry valign="top">unit</entry>
        <entry valign="top"/>
        <entry valign="top">Width of the element.</entry>
      </row>
      <row>
        <entry valign="top">height</entry>
        <entry valign="top">unit</entry>
        <entry valign="top"/>
        <entry valign="top">Height coordinate of the element.</entry>
      </row>
      <row>
        <entry valign="top">id</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">Unique ID of the element. The ID is used for
          referencing the element.</entry>
      </row>
      <row>
        <entry valign="top">visible</entry>
        <entry valign="top">boolean</entry>
        <entry valign="top">true</entry>
        <entry valign="top">Visibility state of the element. Either
          <literal>true</literal> (visible) or <literal>false</literal>
          (hidden). Hidden elements don't consume
          any space and can thus not detect mouse events.</entry>
      </row>

    </tbody>

    </tgroup>
    </informaltable>

  </section>



  <section><title>Action Handlers</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Event Members</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">on-click</entry>
        <entry valign="top">
          <para>button: integer</para>
          <para>x: unit</para>
          <para>y: unit</para>
        </entry>
        <entry valign="top">Handler for mouse click events. A click consists of
          pressing and releasing a mouse button without moving the pointer
          significantly.</entry>
      </row>
      <row>
        <entry valign="top">on-doubleclick</entry>
        <entry valign="top">
          <para>button: integer</para>
          <para>x: unit</para>
          <para>y: unit</para>
        </entry>
        <entry valign="top">Like <parameter>on-click</parameter>, but only
          reacts on double clicks.</entry>
      </row>
      <row>
        <entry valign="top">on-enter</entry>
        <entry valign="top"/>
        <entry valign="top">Handler for <literal>enter</literal> events that
          are triggered every
          time the mouse pointer enters the element.</entry>
      </row>
      <row>
        <entry valign="top">on-file-drop</entry>
        <entry valign="top">
          <para>files: URI list</para>
        </entry>
        <entry valign="top">Handler for dropping files after drag-and-drop
          operations. This only accepts files to be dropped.</entry>
      </row>
      <row>
        <entry valign="top">on-key-press</entry>
        <entry valign="top">
          <para>key: string</para>
        </entry>
        <entry valign="top">Handler for key presses.</entry>
      </row>
      <row>
        <entry valign="top">on-key-release</entry>
        <entry valign="top">
          <para>key: string</para>
        </entry>
        <entry valign="top">Handler for key releases.</entry>
      </row>
      <row>
        <entry valign="top">on-leave</entry>
        <entry valign="top"/>
        <entry valign="top">Like <parameter>on-enter</parameter>, but for
          <literal>leave</literal> events.</entry>
      </row>
      <row>
        <entry valign="top">on-link-drop</entry>
        <entry valign="top">
          <para>links: URI list</para>
        </entry>
        <entry valign="top">Handler for dropping browser links after
          drag-and-drop operations.</entry>
      </row>
      <row>
        <entry valign="top">on-menu</entry>
        <entry valign="top">script</entry>
        <entry valign="top">Handler for the popup menu, reacting when the user
          opens the popup-menu.</entry>
      </row>
      <row>
        <entry valign="top">on-motion</entry>
        <entry valign="top">
          <para>x: unit</para>
          <para>y: unit</para>
        </entry>
        <entry valign="top">Handler for <literal>mouse motion</literal>
          events.</entry>
      </row>
      <row>
        <entry valign="top">on-press</entry>
        <entry valign="top">
          <para>button: integer</para>
          <para>x: unit</para>
          <para>y: unit</para>
        </entry>
        <entry valign="top">Like <parameter>on-click</parameter>, but reacts on
          pressing a button.</entry>
      </row>
      <row>
        <entry valign="top">on-release</entry>
        <entry valign="top">
          <para>button: integer</para>
          <para>x: unit</para>
          <para>y: unit</para>
        </entry>
        <entry valign="top">Like <parameter>on-click</parameter>, but reacts on
          releasing a button.</entry>
      </row>
      <row>
        <entry valign="top">on-scroll</entry>
        <entry valign="top">
          <para>direction: integer</para>
        </entry>
        <entry valign="top">Handler for <literal>mouse wheel</literal>
          events.  The <userinput>direction</userinput> property is 0 for a 
          scroll up event and 1 for a scroll down.</entry>
      </row>

    </tbody>

    </tgroup>
    </informaltable>
  </section>
   
   
   
  <section><title>Examples</title> 
  
    Sample from SideCandy displays:
    <programlisting><![CDATA[
<group id="slider"
       on-click="if (sc_behavior == 'click'): slide(self, SC_IN, SC_OUT)"
       on-doubleclick="if (sc_behavior == 'double'): slide(self, SC_IN, SC_OUT)"
       on-enter="if (sc_behavior == 'enter'): slide(self, SC_IN, SC_OUT)"
       on-leave="if (sc_behavior == 'enter'): slide(self, SC_IN, SC_OUT)"
       on-scroll="scroll_me(self.event.direction)">
    ]]></programlisting>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="dsp-tag-control">
  <title id="tst">&lt;control&gt;</title>

  <para>This tag loads a control by the given interface and binds it to the
    given ID.</para>

  <note>
    <para>This does exactly the same as the inline scripting command
      <command>get_control(interface)</command>. This, however, is the preferred
      way of loading controls, since it's cleaner.</para>
  </note>


  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">id</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">An identifier for accessing the control
          within inline scripts.</entry>
      </row>
    </tbody>

    <tbody>
      <row>
        <entry valign="top">interface</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The <link linkend="ctrl-interface">unique identifier</link> 
          of the interface that you need.
        </entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>



  <section><title>Examples</title>

    <programlisting><![CDATA[
<display>

  <control id="myctrl" interface="ITime:9y703dqtfnv4w373caserz68r"/>

  <label value="click me for time" on-click="self.value=myctrl.time"/>

</display>
    ]]></programlisting>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="dsp-tag-script">
  <title>&lt;script&gt;</title>

  <para>The <command>&lt;script&gt;</command> tag encloses an inline script
    or loads one from a file. If you have several
    <command>&lt;script&gt;</command> tags in a display file, their contents
    get concatenated together before execution.</para>


  <tip>
    <para>Some characters are reserved for XML and thus have to be escaped
      inside inline scripts. You can, however, put the script into a
      <emphasis>CDATA</emphasis> section to make the XML parser ignore the
      reserved characters.</para>
  </tip>


  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">uri</entry>
        <entry valign="top">URI</entry>
        <entry valign="top"/>
        <entry valign="top">If this property is set, the script will be loaded
          from the given file. Otherwise the character data between the
          opening and closing tags is used.</entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>



  <section><title>Examples</title>

    <programlisting><![CDATA[
<display>

  ...

  <script uri="additional.script"/>

  <script><![CDATA[

    def foo(): print "foo"

  ]]>]]&gt;<![CDATA[</script>

</display>
    ]]></programlisting>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="dsp-tag-alignment">
  <title>&lt;alignment&gt;</title>

  <para>This is a container for aligning a child horizontally and vertically.
    You have to set the size of the container to be bigger than its child,
    or the aligning will show no effect. It can only have one child.</para>

  <note>
    <para>This element is deprecated and should not be used in new code.
      The same effects can be achieved with anchors and percentual positioning.
      </para>
    <para><command>&lt;alignment&gt;</command> will be removed in the 0.40
      release!</para>
  </note>


  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">align-x</entry>
        <entry valign="top">float</entry>
        <entry valign="top">0.5</entry>
        <entry valign="top">Horizontal alignment value. Ranges from
          <literal>0.0</literal> (left) to <literal>1.0</literal> (right).
          </entry>
      </row>
      <row>
        <entry valign="top">align-y</entry>
        <entry valign="top">float</entry>
        <entry valign="top">0.5</entry>
        <entry valign="top">Vertical alignment value. Ranges from
          <literal>0.0</literal> (top) to <literal>1.0</literal> (bottom).
          </entry>
      </row>

    </tbody>

    </tgroup>
    </informaltable>

  </section>



  <section><title>Examples</title>

    <para>Since this element is deprecated we don't provide an exmple.</para>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="dsp-tag-array">
  <title>&lt;array&gt;</title>

  <para>This container provides an array of its single child element. The array
    can grow and shrink dynamically.</para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/dsp-array" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>

  <para>
    <note>
      <para><command>&lt;array layout="grid"&gt;</command> is
        deprecated and shouldn't be used. Instead you should create your own
        layout which is quite easy. The third examples shows how to do that.
      </para>
    </note>
  </para>

  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">layout</entry>
        <entry valign="top">string list</entry>
        <entry valign="top">horizontal</entry>
        <entry valign="top">Layout algorithm for positioning the array
          elements.</entry>
      </row>
      <row>
        <entry valign="top">length</entry>
        <entry valign="top">integer</entry>
        <entry valign="top">0</entry>
        <entry valign="top">Sets or gets the length of the array manually.
          The initial length is <literal>0</literal>, but the array
          automatically grows as needed. This property is usually only used for
          making the array shrink (which cannot happen automatically) or for
          obtaining its current length.</entry>
      </row>

    </tbody>

    </tgroup>
    </informaltable>

  </section>



  <section><title>Examples</title>

    <programlisting><![CDATA[
<array layout="vertical" length="5">
  <label value="Some Text"/>
</array>
    ]]></programlisting>

    <programlisting><![CDATA[
<array length="5" layout="vertical">
  <group>
    <label id="label1" value="label1"/>
    <label id="label2" value="label2" relative-to="label1, xy" x="10" y="10"/>
  </group>
</array>
    ]]></programlisting>

    <programlisting><![CDATA[
<!-- An array with a transparent frame around each element -->
<array id="my_array" x="0" y="0.9cm" length="15">
  <frame id="element_border" border-width="0.01cm, 0.01cm, 0.01cm, 0.01cm" \
         color="#00000000">
    <!-- Each array element is the following label -->
    <label id="a" font="Sans 10" color="black" value=""/>
  </frame>
</array>

...

    # Arrange the array in an isosceles triangle with
    # the hypotenuse on the right
    x = 0
    y = 1

    for i in range(Dsp.my_array.length):
        # If you don't want a frame around each element,
        # you can also use Dsp.a[i].x and Dsp.a[i].y to arrange
        Dsp.element_border[i].x = Unit(x * 0.65, CM)
        Dsp.element_border[i].y = Unit( (y-1) * 0.40, CM)

        x += 1
        if x == y:
            x = 0
            y += 1
    ]]></programlisting>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="dsp-tag-canvas">
  <title>&lt;canvas&gt;</title>

  <para>This is a canvas for arbitrary vector graphics. It renders
    SVG code and provides a mini-DOM for scripting the SVG.</para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/dsp-canvas" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>


  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">dom</entry>
        <entry valign="top">object</entry>
        <entry valign="top"/>
        <entry valign="top">Read-only property for accessing the mini-DOM
          representing the current image. Call the method
          <command>update()</command> after changing the DOM to redraw the
          image.</entry>
      </row>
      <row>
        <entry valign="top">graphics</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">Drawing commands. Put your SVG graphics code in
          there.</entry>
      </row>
      <row>
        <entry valign="top">uri</entry>
        <entry valign="top">URI</entry>
        <entry valign="top"/>
        <entry valign="top">URI where to load SVG data from.</entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>

  <para>
    <tip>
      <para>If you omit the <property>width</property> and
        <property>height</property> properties in the
        <command>&lt;svg&gt;</command> tag, then the canvas size will
        default to <literal>100 x 100</literal>.</para>
    </tip>
  </para>

  <section><title>Mini-DOM</title>

    <para>The mini-DOM contains the tree of SVG elements. Every node in the
      DOM represents one element in the SVG image. By manipulating properties
      of SVG elements, you can animate the image.</para>

    <para>The properties of each node can be addressed by using a
      <literal>[name]</literal> notation, where <literal>name</literal> is the
      name of the property. All property values have to set as strings.</para>

    <para>The nodes of the mini-DOM provide a set of methods which can be
      invoked.</para>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Method Name</entry>
        <entry>Arguments</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">get</entry>
        <entry valign="top">id: string</entry>
        <entry valign="top">Returns the SVG element by the given ID. This
          method only has effect when called on the root node of the DOM tree.
          </entry>
      </row>
      <row>
        <entry valign="top">get_children</entry>
        <entry valign="top"/>
        <entry valign="top">Returns a list of all child nodes of the DOM node.
          Using child lists is a way of accessing nodes in the DOM without the
          need to know their IDs.</entry>
      </row>
      <row>
        <entry valign="top">update</entry>
        <entry valign="top"/>
        <entry valign="top">Signals that the DOM has been updated. Call this
          method after modifying SVG properties in order to redraw the
          image. This method only has effect when called on the root node of
          the DOM tree.</entry>
      </row>

    </tbody>

    </tgroup>
    </informaltable>


  </section>



  <section><title>Examples</title>

    <programlisting><![CDATA[
<display bg-color="#ffffffa0">

  <canvas id="cnv" width="200" height="200"
          on-enter="self.dom.get('rct')['style']='fill:green'; self.dom.update()"
          on-leave="self.dom.get('rct')['style']='fill:red'; self.dom.update()"/>

  <script>]]>&lt;![CDATA[<![CDATA[

    svg = """
      <svg>

        <rect id="rct" x="10" y="10" width="80" height="80" style="fill:red"/>

      </svg>
    """

    Dsp.cnv.graphics = svg

  ]]>]]&gt;<![CDATA[</script>

</display>
    ]]></programlisting>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="dsp-tag-display">
  <title>&lt;display&gt;</title>

  <para>This is the root element of every display file. It represents the
    display window on the screen. Apart from being a toplevel window, it is
    similar to a
    <link linkend="dsp-tag-group">&lt;group&gt;.</link> and inherits all of its
    properties.</para>


  <section><title>Attributes</title>
    <informaltable frame="topbot">
      <tgroup>
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Type</entry>
            <entry>Default Value</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>bg-color</entry>
            <entry>color</entry>
            <entry>#00000000</entry>
            <entry>The background color of the display. You may use the
              alpha channel for color values to achieve translucency.</entry>
          </row>
          <row>
            <entry>bg-uri</entry>
            <entry>URI</entry>
            <entry/>
            <entry valign="top">The background image of the display. Overrides
              <property>bg-color</property>. If the image does not fit the
              window, it gets tiled over it.</entry>
          </row>
          <row>
            <entry>desktop-borders</entry>
            <entry>unit list</entry>
            <entry/>
            <entry valign="top">The desktop borders settings, if the window manager
              supports desktop struts.
              This property takes a list of two unit values, horizontal and
              vertical. Each value specifies the distance of the border from the
              desklet window. See below for details and examples.</entry>
          </row>
          <row>
            <entry>icon</entry>
            <entry>URI</entry>
            <entry/>
            <entry valign="top">The window icon.</entry>
          </row>
          <row>
            <entry>shape</entry>
            <entry>URI</entry>
            <entry/>
            <entry valign="top">The shape of the window. Images with an alpha
              channel can be used for changing the shape. All completely
              transparent parts result in holes in the window.</entry>
          </row>
          <row>
            <entry>title</entry>
            <entry>string</entry>
            <entry/>
            <entry valign="top">The window title.</entry>
          </row>
          <row>
            <entry valign="top">window-flags</entry>
            <entry valign="top">string list</entry>
            <entry valign="top">decorated, managed</entry>
            <entry valign="top">Attribute flags for the window. See below for a
              list of the supported flags.
              <literal>above, below, decorated, managed, sticky</literal>.
              </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </section>



  <section><title>Window Flags</title>

    <para>Window flags can change the appearance and the behavior of a window.
      The following flags are recognized by
      <application>gDesklets</application>:</para>

    <itemizedlist>
      <listitem><literal>above</literal> - The window appears above all normal
        windows and cannot be lowered.</listitem>
      <listitem><literal>below</literal> - The window appears below all normal
        windows and cannot be raised.</listitem>
      <listitem><literal>decorated</literal> - A decorated window has a titlebar
        and a window frame.</listitem>
      <listitem><literal>managed</literal> - A managed window is controlled by
        the window manager, not by <application>gDesklets</application>.
        </listitem>
      <listitem><literal>sticky</literal> - The window appears on all
        workspaces.</listitem>
    </itemizedlist>

    <tip>
      <para>The ideal combination for desktop applets is <literal>sticky,
        below</literal>.</para>
    </tip>

  </section>


  <section><title>Desktop Borders <emphasis>[new in 0.35]</emphasis></title>

    <para>Desktop borders define areas on the desktop which cannot be covered
      by maximized windows. Panels (i.e. gnome-panel, pypanel) use this 
      feature, for example.</para>
      
    <para>Display windows take two arguments for the border settings. One for
      a horizontal border and one for a vertical border. The values specify the
      distance of the border from the display window. For example, a desklet at
      the bottom edge of the screen with a vertical border value set to
      <literal>0</literal> (i.e. <literal>desktop-borders=",0"</literal> will 
      set a "virtual desktop border" along the desklet's top edge. If the
      desklet, however, is nearer towards the top edge of the screen, the border
      will be along its bottom edge.</para>
      
    <para>When increasing the border value (greater than <literal>0</literal>), 
      the border will be shifted away from the screen's edge by that amount. 
      Negative values pull the border towards the screen's edge. If you unset 
      the value (leave it empty) the border will be turned off.  You can do this
      with the unit constructor <literal>Unit()</literal> in an inline script.
      </para>
      
    <note>
      <para>Desktop borders might by annoying sometimes. So if your desklet supports
        desktop borders, please also provide an option to turn off that behavior!
        </para>
    </note>

  </section>
  
  

  <section><title>Examples</title>

    <programlisting><![CDATA[
<display window-flags="sticky, below" bg-color="white"
         width="100" height="100"
         desktop-borders=",0">

  <!-- This sets the height and width of the desklet to 
       100 pixels, puts the desklet below all other 
       windows and on every virtual desktop, and sets 
       the top or bottom "virtual border" of the desktop 
       to be exactly at the edge of the desklet.
    -->

  ...
  
</display>


<display id="win"
         window-flags="sticky, above"
         desktop-borders="-20,">

  <!-- This sets the left or right "virtual border"
       of the desktop to be 20 pixels below or above 
       the top or bottom of the desklet, respectively.
    -->

  ...

  <prefs>
    <!-- Add a configuration option so the user can
         set how much of a space between the desklet's
         side and a maximized window he or she would 
         like.
      -->
    <integer label="Side Border Placement:" 
        min="-500" 
        bind="tb_border" callback="border_chg"/>
  </prefs>
  
  ...
  
  <script>
    <![CDATA[
    
    tb_border = -20
    
    def border_chg(key, value):
        
        # desktop-borders expects a list of Unit types
        # so that's what we have to give it.  The 
        # second argument is just the Unit constructor,
        # which is like leaving the second argument blank
        # in the <display> tag above.
        Dsp.win.desktop_borders = [Unit(value,PX),Unit()]
    
</display>
]]></programlisting>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="dsp-tag-embed">
  <title>&lt;embed&gt;</title>

  <para>This element embeds Bonobo controls. That way it is possible to put
    GNOME panel applets into a desklet.</para>

  <note>
    <para>This element is in an experimental state and Bonobo is becoming a
      deprecated technology on the
      <application>GNOME Desktop and Developer Platform</application>.</para>
  </note>


  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">oafiid</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">OAFIID of the Bonobo control that you want to
          embed. Consult the Bonobo documentation for details.</entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>



  <section><title>Examples</title>

    <para>Since this element is deprecated we don't provide an exmple.</para>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="dsp-tag-entry">
  <title>&lt;entry&gt;</title>

  <para>The <command>&lt;entry&gt;</command> element provides a text entry
    widget with unicode support.</para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/dsp-entry" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>


  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">color</entry>
        <entry valign="top">color</entry>
        <entry valign="top">(system default)</entry>
        <entry valign="top">The font color to use. The alpha channel cannot be
          used here.</entry>
      </row>
      <row>
        <entry valign="top">font</entry>
        <entry valign="top">font</entry>
        <entry valign="top">(system default)</entry>
        <entry valign="top">The font of the entry text.</entry>
      </row>
      <row>
        <entry valign="top">value</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The current value in the entry field.</entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>


  <section><title>Action Handlers</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Event Members</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">on-change</entry>
        <entry valign="top"/>
        <entry valign="top">Handler for change events. A change occurs every
          time when the value changes.</entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>


  <section><title>Examples</title>

    <programlisting><![CDATA[
<display>

  <entry id="entry" on-change="Dsp.lbl.value = self.value"/>

  <label id="lbl" relative-to="entry, y"/>

</display>
    ]]></programlisting>
    <programlisting><![CDATA[
<display>

  <entry id="entry"
    on-key-press="if self.event.key == 'Return': Dsp.lbl.value = self.value"/>

  <label id="lbl" relative-to="entry, y"/>

</display>
    ]]></programlisting>
  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="dsp-tag-frame">
  <title>&lt;frame&gt;</title>

  <para>This container puts a frame around its child element. The frame can
    either consist of a single color or of image elements.</para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/dsp-frame" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>


  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">border-uris</entry>
        <entry valign="top">string list</entry>
        <entry valign="top"/>
        <entry valign="top">URIs of the eight graphic images building the frame
          (west, north, east, south, north-west, north-east, south-east,
          south-west).</entry>
      </row>
      <row>
        <entry valign="top">border-width</entry>
        <entry valign="top"><link linkend="layout-units">unit list</link></entry>
        <entry valign="top">2, 2, 2, 2</entry>
        <entry valign="top">Width of each frame side
          (left, top, right, bottom).</entry>
      </row>
      <row>
        <entry valign="top">color</entry>
        <entry valign="top">color</entry>
        <entry valign="top">black</entry>
        <entry valign="top">Color of the frame.</entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>



  <section><title>Examples</title>

    <programlisting><![CDATA[
<display>

  <frame id="outer_frame" color="red">
    <frame border-width="5, 5, 5, 5" color="green">
      <frame border-width="5, 5, 5, 5" color="blue">
        <frame color="yellow">

          <label value="framed text" font="Sans 3cm"/>

        </frame>
      </frame>
    </frame>
  </frame>

...

Dsp.outer_frame.border_width = [ Unit(1, IN), Unit(2, IN), 
                                 Unit(3, IN), Unit(4, IN) ]

# Likewise with the border_uris property except 
# it would then be a list of 8 strings.

</display>
    ]]></programlisting>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="dsp-tag-gauge">
  <title>&lt;gauge&gt;</title>

  <para>This container turns its child element into a gauge. It will only
    display a percentual amount of it.</para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/dsp-gauge" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>

  <para>
    <tip>
      <para>The gauge only grows from left to right or top to bottom. You can
        use the <parameter>anchor</parameter> property to turn this around.
        E.g. a vertically growing gauge with <userinput>anchor="s"
        </userinput> will grow upwards.</para>
    </tip>
  </para>

  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">fill</entry>
        <entry valign="top">integer</entry>
        <entry valign="top">100</entry>
        <entry valign="top">A percentual value between <literal>0</literal>
          (empty) and <literal>100</literal> (full). Only that amount of the
          child element will be visible.</entry>
      </row>
      <row>
        <entry valign="top">orientation</entry>
        <entry valign="top">string</entry>
        <entry valign="top">horizontal</entry>
        <entry valign="top">Either <literal>horizontal</literal> or
          <literal>vertical</literal> for horizontally or vertically growing
          gauges.</entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>


  <section><title>Examples</title>

    <programlisting><![CDATA[
<display bg-color="grey50" width="100"
         on-scroll="scroll(self.event.direction)">

  <gauge id="mygauge" fill="50" anchor="sw" y="100%">

    <group width="100" height="10" bg-color="red"/>

  </gauge>

  <label id="mylabel" anchor="center" x="50%" y="50%" font="Sans bold 1cm"
         value="%"/>

  <script><![CDATA[

    #
    # This gauge can be adjusted using the vertical mouse wheel.
    #
    def scroll(direction):

        fill = Dsp.mygauge.fill
        if (direction == 0):
            fill = max(fill - 1, 0)
        elif (direction == 1):
            fill = min(fill + 1, 100)
        Dsp.mygauge.fill = fill
        Dsp.mylabel.value = "%d%%" % fill

  ]]>]]&gt;<![CDATA[</script>

</display>
    ]]></programlisting>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="dsp-tag-group">
  <title>&lt;group&gt;</title>

  <para>This container groups several child elements together in order to
    treat them as a whole. You can use the group for building complex child
    elements for containers which accept only one child element, such as
    the <link linkend="dsp-tag-array">&lt;array&gt;</link>, or the
    <link linkend="dsp-tag-gauge">&lt;gauge&gt;</link>.</para>

  <para>
    <tip>
      <para>Empty groups with a forced size and some background can be used as
        colored or textured rectangles.</para>
    </tip>
  </para>

  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">bg-color</entry>
        <entry valign="top">color</entry>
        <entry valign="top">#00000000</entry>
        <entry valign="top">The background color of the group. You can use the
          alpha channel for color values to achieve translucency.</entry>
      </row>
      <row>
        <entry>bg-uri</entry>
        <entry>URI</entry>
        <entry/>
        <entry valign="top">The background image of the group. Overrides
          <property>bg-color</property>. If the image does not fit the window,
            it gets tiled over it.</entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>


  <section><title>Examples</title>

    <programlisting><![CDATA[
<group id="lgroup">
  <label id="label1" value="label1"/>
  <label id="label2" value="label2" relative-to="label1, xy"
      x="10" y="10"/>
</group>
<label relative-to="lgroup, y" y="25" value="label3"/>
    ]]></programlisting>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="dsp-tag-image">
  <title>&lt;image&gt;</title>

  <para>This element displays an image loaded from a file. It can load the
    common pixel graphic formats and SVG.</para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/dsp-image" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>


  <tip>
    <para>The <command>&lt;image&gt;</command> element can read SVG images,
      but will render them as pixel graphics. If you want to get good scaling
      results or even SVG scripting, then use the
      <link linkend="dsp-tag-canvas"><command>&lt;canvas&gt;</command></link>
      element instead.</para>
  </tip>


  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">image-width</entry>
        <entry valign="top">unit</entry>
        <entry valign="top"/>
        <entry valign="top">The width of the image. The image will be scaled 
          accordingly.</entry>
      </row>
      <row>
        <entry valign="top">image-height</entry>
        <entry valign="top">unit</entry>
        <entry valign="top"/>
        <entry valign="top">The height of the image. The image will be scaled 
          accordingly.</entry>
      </row>
      <row>
        <entry valign="top">opacity</entry>
        <entry valign="top">float</entry>
        <entry valign="top">1.0</entry>
        <entry valign="top">A floating point value greater than or equal to 
          <literal>0.0</literal> and less than or equal to
          <literal>1.0</literal>.  
          <literal>0.0</literal> corresponds to invisible and 
          <literal>1.0</literal> corresponds to fully opaque.</entry>
      </row>
      <row>
        <entry valign="top">scale</entry>
        <entry valign="top">float</entry>
        <entry valign="top">1.0</entry>
        <entry valign="top">A decimal value greater than <literal>0</literal>
          for the scaling factor of the image. A factor of
          <literal>1.0</literal> yields the original size.</entry>
      </row>
      <row>
        <entry valign="top">uri</entry>
        <entry valign="top">URI</entry>
        <entry valign="top"/>
        <entry valign="top">The path of an image file in a supported file
          format.</entry>
      </row>

    </tbody>

    </tgroup>
    </informaltable>

    <para>
      <tip>
        <para>Use <property>image-width</property> or
          <property>image-height</property> alone to preserve the aspect ratio
          while scaling the image.</para>
      </tip>
    </para>

  </section>



  <section><title>Examples</title>

    <programlisting><![CDATA[
...
<image uri="http://gdesklets.gnomedesktop.org/" scale="2.5"/>
...
    ]]></programlisting>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="dsp-tag-label">
  <title>&lt;label&gt;</title>

  <para>A label for displaying one or more lines of text. The Pango markup
    language can be used for marking up passages of text.</para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/dsp-label" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>


  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">color</entry>
        <entry valign="top">color</entry>
        <entry valign="top">(system default)</entry>
        <entry valign="top">The text color. You cannot use an alpha channel for
          colors here. The text color can also be changed with markup tags in
          the running text.
          (<emphasis>[new in 0.35]</emphasis> the alpha channel can be used!)</entry>
      </row>
      <row>
        <entry valign="top">font</entry>
        <entry valign="top">font</entry>
        <entry valign="top">(system default)</entry>
        <entry valign="top">The text font. The font can also be changed with
          markup tags in the running text.</entry>
      </row>
      <row>
        <entry valign="top">value</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The text to display. It has to be in valid UTF-8
          encoding and has to escape characters which are reserved in XML by
          using the usual XML entities.</entry>
      </row>
      <row>
        <entry valign="top">wrap-at</entry>
        <entry valign="top">unit</entry>
        <entry valign="top"/>
        <entry valign="top">The width at which the label should wrap to the
          next line.  Wrapping is disabled by default.</entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>



  <section><title>Examples</title>

    <programlisting><![CDATA[
<display>

  <label value="gDesklets rocks!" font="Sans 3cm" color="red"/>
  
  <label id="line2" 
    value="This is a really long line, but it will be
    wrapped at 1 CM because I'm going to tell it to!  
    I'll wrap it to 1/2 an inch in the script though..." 
    wrap-at="1cm"/>

</display>

<script>
  
  # The following will change the wrapping to 0.5 inches
  Dsp.line2.wrap_at = Unit( 0.5, IN )

</script>
    ]]></programlisting>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="dsp-tag-plotter">
  <title>&lt;plotter&gt;</title>

  <para>This element is for plotting graphs. It represents a specialized handy
    frontend for the <link linkend="dsp-tag-canvas">&lt;canvas&gt;</link> by
    taking value by value.</para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/dsp-plotter" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>


  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">bars</entry>
        <entry valign="top">bool</entry>
        <entry valign="top">false</entry>
        <entry valign="top">Display the graph using bars.</entry>
      </row>
      <row>
        <entry valign="top">bg-color</entry>
        <entry valign="top">color</entry>
        <entry valign="top"/>
        <entry valign="top">The background color.</entry>
      </row>
      <row>
        <entry valign="top">color</entry>
        <entry valign="top">color</entry>
        <entry valign="top">navy</entry>
        <entry valign="top">The plot color.</entry>
      </row>
      <row>
        <entry valign="top">scala</entry>
        <entry valign="top">integer</entry>
        <entry valign="top">0</entry>
        <entry valign="top">The scale to be used for the scala (0 turns the scala off).</entry>
      </row>
      <row>
        <entry valign="top">scala-color</entry>
        <entry valign="top">color</entry>
        <entry valign="top">black</entry>
        <entry valign="top">The font color to be used for the scala.</entry>
      </row>
      <row>
        <entry valign="top">scala-font</entry>
        <entry valign="top">font</entry>
        <entry valign="top">Sans</entry>
        <entry valign="top">The font to be used for the scala.</entry>
      </row>
      <row>
        <entry valign="top">scale-bidir</entry>
        <entry valign="top">boolean</entry>
        <entry valign="top">false</entry>
        <entry valign="top">Enables scaling of the lower boundary, so negative 
          values won't 'drop off'.</entry>
      </row>
      <row>
        <entry valign="top">scale-holdmax</entry>
        <entry valign="top">boolean</entry>
        <entry valign="top">false</entry>
        <entry valign="top">Enables a hold-function on the scaling.  When the 
          scaling is changed because of large values, it will not return to 
          the default scaling once those large values have disappeared from 
          the history.</entry>
      </row>
      <row>
        <entry valign="top">size</entry>
        <entry valign="top">integer</entry>
        <entry valign="top">50</entry>
        <entry valign="top">The numbers of values stored in the history.</entry>
      </row>
      <row>
        <entry valign="top">value</entry>
        <entry valign="top">integer</entry>
        <entry valign="top"/>
        <entry valign="top">The next value to append to the history of values. 
          Values may range from <literal>0</literal> to
          <literal>100</literal>, but if you supply values greater than
          <literal>100</literal>, the graph will scale accordingly.</entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>



  <section><title>Examples</title>

    <programlisting><![CDATA[
<display bg-color="white" anchor="center" x="50%" y="50%">

  <control id="sys" interface="ISystem:4i4p0jtvdz87qx44x2dm97ltj"/>

  <plotter width="100" height="100" size="100" id="plotter" color="black"/>

  <script><![CDATA[

    def cpu_handler():
      Dsp.plotter.value = sys.cpu_load
      return True

    add_timer(500, cpu_handler)

  ]]>]]&gt;<![CDATA[</script>
 
</display>

    ]]></programlisting>

  </section>

</section>

</chapter>
  <chapter xmlns:xi="http://www.w3.org/2001/XInclude" id="layout">
  <title>Layouting</title>

  <para>A big strength of <application>gDesklets</application> are its
    rich layouting capabilities, which easily surpass conventional layouting
    in graphical toolkits. This chapter explains layouting in detail.</para>

  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="layout-units">
  <title>Units</title>

<section><title>Why Pixels are Bad</title>

  <para>In the old days, every computer screen was <literal>640 x 480</literal>
    pixels in size. An application with a pixel-based layout thus looked the
    same on all screens. Nowadays, however, common screen resolutions range
    from <literal>800 x 600</literal> pixels up to <literal>1600 x 1200</literal>
    pixels or even more. Of course, a pixel-based layout would look the same
    on all screens, but a layout designed for a <literal>800 x 600</literal>
    screen would be unreadably small on a <literal>1600 x 1200</literal> screen.
    </para>

  <para>Some resolutions don't even have a near-to-square pixel aspect ratio,
    and pixel-based layouts could look distorted.</para>

  <para>For truly resolution-independent layouts, you cannot work with pixel
    values. Instead, classical units such as centimeters, inches, or DTP
    points become useful. And, of course, <application>gDesklets</application>
    supports all of these.</para>

</section>



<section><title>Layouting with Units</title>

  <para>Every geometry property, such as the
    <property>x</property>, <property>y</property>, <property>width</property>,
    and <property>height</property> properties accept unit-based values. If the
    unit is omitted, pixels are used instead.</para>

  <para>The units supported by the <application>gDesklets</application> platform
    are:</para>

  <itemizedlist>
    <listitem><literal>cm</literal> - centimeters</listitem>
    <listitem><literal>in</literal> - inches</listitem>
    <listitem><literal>pt</literal> - DTP points (1 pt = 1/72 inch)</listitem>
    <listitem><literal>%</literal> - percentage of the size of the parent
                                     container element</listitem>
  </itemizedlist>

  <note>
    <para>The correct scaling factor for transforming into pixels is computed
      from the DPI setting of the X server. For good results, the DPI value
      has to be set correctly. Some display managers, e.g.
      <application>kdm</application>, are known to set a hardcoded value of
      100 dpi by default, which results in wrong scaling on most screens.</para>
  </note>

</section>


</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="layout-anchors">
  <title>Anchors</title>

  <para>The <emphasis>anchor</emphasis> of a display element is the point
    of the element which is used for positioning. If you place an element at
    the coordinates <literal>(10, 10)</literal>, then the element will be
    positioned with its anchor lying on that point.</para>

  <para>The default anchor is the top-left corner, which is called
    <literal>nw</literal> in <application>gDesklets</application>, because it
    is in the north-west, if you assume north pointing upwards.</para>

  <para>By changing the <property>anchor</property> property to another value,
    you can easily achieve some fancy layouts. For instance, by setting the
    anchor to <literal>se</literal>, and placing the element at
    <literal>(100%, 100%)</literal>, you can align the element with the
    bottom-right corner of its container.</para>

  <para>The valid anchor positions are:</para>

  <itemizedlist>
    <listitem><literal>nw</literal> - north-west, the top-left corner</listitem>
    <listitem><literal>n</literal> - north, the middle of the top edge</listitem>
    <listitem><literal>ne</literal> - north-east, the top-right corner</listitem>
    <listitem><literal>e</literal> - east, the middle of the right edge</listitem>
    <listitem><literal>se</literal> - south-east, the bottom-right corner</listitem>
    <listitem><literal>s</literal> - south, the middle of the bottom edge</listitem>
    <listitem><literal>sw</literal> - south-west, the bottom-left corner</listitem>
    <listitem><literal>w</literal> - west, the middle of the left edge</listitem>
    <listitem><literal>center</literal> - the center of the element</listitem>
  </itemizedlist>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="layout-relative">
  <title>Relative Positioning</title>

  <para>Sometimes an element has to be positioned next to another one. This
    could be achieved by retrieving the other element's geometry values and
    computing the coordinates of the place next to it. This, however, is
    tedious and not neccessary.</para>

  <para><application>gDesklets</application> supports
    <emphasis>relative positioning</emphasis>. With relative positioning,
    you can use the <property>x</property> and <property>y</property>
    properties to place an element next to another one.</para>

  <para>Relative placement is enabled by using the
    <link linkend="dsp-tag-common"><property>relative-to</property></link>
    property.</para>

  <para>The three directions available for relative positioning are:</para>

  <itemizedlist>
    <listitem><literal>x</literal> - right to the element</listitem>
    <listitem><literal>y</literal> - below the element</listitem>
    <listitem><literal>xy</literal> - below right to the element</listitem>
  </itemizedlist>

  <para>The new coordinates origin for relative positioning is computed as
    follows:</para>

  <orderedlist>
    <listitem>Begin at the anchor of the relative element.</listitem>
    <listitem>For <literal>x</literal> or <literal>xy</literal>, move to the
      right edge of the element.</listitem>
    <listitem>For <literal>y</literal> or <literal>xy</literal>, move to the
      bottom edge of the element.</listitem>
    <listitem>This place will be the new coordinates origin.</listitem>
  </orderedlist>

  <para>The origin thus depends on the position of the
    <link linkend="layout-anchors">anchor</link> of the relative element.
    If the anchor is <literal>center</literal>, for example, then the new
    origin will be at the same x or y coordinate as the anchor.
    This does not affect the <literal>xy</literal> placement, though.</para>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="layout-mistakes">
  <title>Avoid Common Mistakes</title>

  <para>The layouting model used by <application>gDesklets</application> is based
  on nesting boxes. While this approach is highly flexible, yet easy to understand,
  there can be cases where the result might not look as expected. This section tries
  to explain some common mistakes and show why the result does look as it looks.</para>
  


<section><title>Containers Collapse</title>

  <para>If you don't explicity specify a size for a container element, it will
    just take up as much space as its child elements need. An empty container
    will thus collapse to the size of a single point.</para>
    
  <para>A common mistake is to put only elements with percentual geometry values
    into a container. A child element with any percentual geometry value does
    <emphasis>not</emphasis> contribute to the container's size because its size or
    position itself is dependant on the container's size.</para>
    
  <para>With older versions of <application>gDesklets</application> the results
    of such a situation were undefined. With version 0.35,
    <application>gDesklets</application> switched to a more accurate geometry
    engine, and the container will collapse correctly.</para>
    
</section>



<section><title>Percentual Size</title>

  <para>Elements with their size given in percentages depend on the size of their
    parent container. A common mistake is to have a child's size depend on the size
    of a container which has no defined size, for example:</para>
    
  <programlisting><![CDATA[
  <display width="100" height="100">
  
    <frame>
      
      <group width="100%" height="100%" bg-color="white"/>
      
    </frame>
  
  </display>
  ]]></programlisting>

  <para>As you can seem the <command>group</command> element has it's size
    depend on the size of the <command>frame</command> container. This container,
    however, has no defined size. In that case it will collapse to fit its child
    elements. However, since the child element itself depends on the size of the
    container, the <command>frame</command> will collapse to a single point
    (see above).</para>
    
  <para>To make the <command>group</command> within the <command>frame</command>
    occupy the whole window area, the <command>frame</command> also needs to
    be stretched to the window size:</para>

  <programlisting><![CDATA[
  <display width="100" height="100">
  
    <frame width="100%" height="100%">
      
      <group width="100%" height="100%" bg-color="white"/>
      
    </frame>
  
  </display>
  ]]></programlisting>
          
</section>


<section><title>Relative Positioning</title>

  <para>Elements placed relatively to each other have to be in the same parent
    container. If this is not the case, it depends on the version of
    <application>gDesklets</application> whether this will raise an error or be
    silently ignored altogether.</para>

</section>

</section>

</chapter>
  <chapter xmlns:xi="http://www.w3.org/2001/XInclude" id="script">
  <title>Scripting</title>

  <para>Static display elements can be brought to life with scripting. This
    chapter describes scripting in detail.</para>

  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="script-language">
  <title>Scripting Language</title>

  <para>Scripts in <application>gDesklets</application> are written in the
    Python language. By language, we mean the core language, not the rich
    set of modules, which is not available in the sandbox for security
    reasons.</para>

  <para>Python scripts require proper indentation, so the same rule applies to
    scripts on the <application>gDesklets</application> platform. You have to
    take care of consistent indentation within the
    <command>&lt;script&gt;</command> tags.</para>

  <note>
    <para>If you include scripts in your <filename>.display</filename> file,
      you have to make sure that the script doesn't use any characters reserved
      by XML. You can escape them by using the common XML entities, or in case
      of the <command>&lt;script&gt;</command> tag, by putting the script code
      into a CDATA section.</para>
  </note>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="script-sandbox">
  <title>Sandboxed Execution</title>

  <para>Inline scripts are automatically executed when found in a display.
    Because <application>gDesklets</application> can load displays from remote
    locations as well, special care was taken to protect the user by running
    the code in a sandboxed environment.</para>

  <para>This, however, has the effect that the capabilities of scripting
    code are limited to modifying the elements of the display. There is no
    way to read or modify data on the system.</para>

  <para>If there is need for such actions, you have to use
    <emphasis>controls</emphasis>, which provide a controlled way to access
    data outside the sandbox. The use of controls is explained in
    <link linkend="ctrl">another chapter.</link></para>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="script-using">
  <title>Using Scripts</title>

<section><title>Places</title>

  <para>The two places where inline scripts occur are the
    <link linkend="dsp-tag-script"><command>&lt;script&gt;</command></link>
    element and the action handlers of display elements.</para>

</section>



<section id="script-using-dsp"><title>The Dsp Namespace</title>

  <para>There is a special namespace <literal>Dsp</literal> available in all
    scripts. This namespace contains the IDs of all display elements.</para>


</section>

<section><title>Action Handlers</title>

  <para>Action handlers such as <parameter>on-click</parameter> provide a
    convenient reference <literal>self</literal> for addressing the display
    element of the action handler. Instead of <literal>self</literal>, you can
    also use the element's ID within the <literal>Dsp</literal> namespace,
    of course.</para>

  <programlisting><![CDATA[
<image id="myimg" uri="gfx/button.png"
       on-click="self.uri = 'gfx/button-clicked.png'"/>
  ]]></programlisting>

  <para>is equivalent to</para>

  <programlisting><![CDATA[
<image id="myimg" uri="gfx/button.png"
       on-click="Dsp.myimg.uri = 'gfx/button-clicked.png'"/>
  ]]></programlisting>

  <para>Some actions create an <emphasis>event</emphasis> object with
    information about the action. A click action, e.g. generates an event
    object with information about the mouse button that has been clicked.</para>

  <para>The event object is a property of the display element, and can be
    accessed through the <property>event</property> property. Each event object
    has a set of properties itself, depending on the particular action.
    The event object of the click action, for instance, has a
    <property>button</property> property.</para>

  <programlisting><![CDATA[
<image uri="gfx/button.png" on-click="print self.event.button"/>
  ]]></programlisting>

  <para>See <link linkend="dsp-tag-common" endterm="dsp-tag-common-title"/>
    for a description of the event objects.</para>

</section>



<section><title>Arrays</title>

  <para>Elements within an
    <link linkend="dsp-tag-array"><command>&lt;array&gt;</command></link>
    tag can be addressed through a special array notation with index numbers:
    </para>

  <programlisting><![CDATA[
<array length="5">
  <label id="mylabel" value="I'm a label"/>
</array>

<script>

  # change the value of the fourth element (index 3) in the array
  Dsp.mylabel[3].value = "I'm just a label"

</script>
  ]]></programlisting>

</section>
 

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="script-menu">
  <title>Custom Menus <emphasis>[new in 0.35]</emphasis></title>

  <para>Each display element can have its own custom menu by setting the
    <property>menu</property> property.</para>

        
<section><title>Menus</title>

  <para>A menu is a list of <literal>MenuItem</literal> objects. To create
    a menu item, use the <literal>MenuItem</literal> constructor.</para>
    
    <programlisting><![CDATA[
mymenu = [MenuItem("/item1", "New", icon = "gfx/new.png", callback = do_new),
          MenuItem("/item2", "Open", icon = "gfx/open.png", callback = do_open),
          MenuItem("/item3", "Save", icon = "gfx/save.png", callback = do_save)]
]]></programlisting>
    
</section>


<section><title>The MenuItem Constructor</title>
    
  <para>The <literal>MenuItem</literal> constructor takes a bunch of arguments,
    of which many are optional. Menu items can have:</para>
    
  <itemizedlist>
    <listitem>a path</listitem>
    <listitem>a label text</listitem>
    <listitem>an icon</listitem>
    <listitem>a callback handler</listitem>
    <listitem>a list of arguments for the callback handler</listitem>
    <listitem>a flag for being selectable or not (greyed out)</listitem>
  </itemizedlist>
  
  <para>These are arguments to the constructor, but also properties of the
    <literal>MenuItem</literal> objects. So it's possible to change values any
    time by assigning new values to the properties.</para>
    
  <para>Each item has a unique path within the menu. This path is used for
    setting submenus. Each path begins with a slash ("/") character and is
    constructed similar to a filesystem path, e.g. "<literal>/mymenu</literal>".
    </para>
    
</section>

  
      
<section><title>Adding Submenus</title>

  <para>In order to add a submenu, you simply add a new item with an extended path,
    e.g. "<literal>/mymenu/mysubmenu</literal>". <application>gDesklets</application>
    will setup the menu structure automatically, so you don't have to bother
    with attaching submenus to menu items manually.</para>

  <programlisting><![CDATA[
mymenu = [MenuItem("/item1", "New", icon = "gfx/new.png", callback = do_new),
          MenuItem("/item2", "Open", icon = "gfx/open.png"),
          MenuItem("/item2/foo", "from file", callback = do_open_file),
          MenuItem("/item2/bar", "from URL", callback = do_open_url),
          MenuItem("/item3", "Save", icon = "gfx/save.png", callback = do_save)]
]]></programlisting>

  <para>Menu items with submenus are not clickable and thus don't need any callback
    handler, of course.</para>

  <note>
    <para>Navigating submenus with the mouse is considered difficult by many users.
      If possible, you should avoid making deeply nested submenus!</para>
  </note>
</section>

<section><title>Adding a Separator Line</title>

  <para>A menu item with only a path will be displayed as a separator line.</para>

  <programlisting><![CDATA[
mymenu = [MenuItem("/item1", "New", icon = "gfx/new.png", callback = do_new),
          MenuItem("/sep"),
          MenuItem("/item2", "Open", icon = "gfx/open.png", callback = do_open),
          MenuItem("/item3", "Save", icon = "gfx/save.png", callback = do_save)]
]]></programlisting>

</section>



<section><title>Displaying a Menu</title>

  <para>Whenever you assign a list of <literal>MenuItem</literal> objects to the
    <property>menu</property> property of a display element, that menu will be
    displayed.</para>

  <programlisting><![CDATA[
...
<label value="Blah" on-menu="self.menu = mymenu"/>
...
<script>
  def do_new(): ...
  def do_open(): ...
  def do_save(): ...
  
  mymenu = [MenuItem("/item1", "New", icon = "gfx/new.png", callback = do_new),
            MenuItem("/sep"),
            MenuItem("/item2", "Open", icon = "gfx/open.png", callback = do_open),
            MenuItem("/item3", "Save", icon = "gfx/save.png", callback = do_save)]
</script>
...
]]></programlisting>

</section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="script-builtins">
  <title>Builtin Functions and Objects</title>

  <para><application>gDesklets</application> provides a few functions and
    objects for use in the scripting environment.</para>


  <informaltable frame="topbot">
  <tgroup>

  <thead>
    <row>
      <entry>Name</entry>
      <entry>Arguments</entry>
      <entry>Description</entry>
    </row>
  </thead>

  <tbody>
    <row>
      <entry valign="top">add_timer</entry>
      <entry valign="top">
        <para>interval: integer</para>
        <para>callback: function</para>
      </entry>
      <entry valign="top">Runs the function <literal>callback</literal> after
        <literal>interval</literal> milliseconds. If the function returns
        <literal>True</literal>, it will be called again after
        <literal>interval</literal> milliseconds.</entry>
    </row>
    <row>
      <entry valign="top">get_config</entry>
      <entry valign="top">
        <para>key: string</para>
        <para>default: any (optional)</para>
      </entry>
      <entry valign="top">Retrieves a previously stored configuration value for
        <literal>key</literal> or the value given by <literal>default</literal>,
        if the value had not been stored previously.</entry>
    </row>
    <row>
      <entry valign="top">get_control <emphasis>[deprecated]</emphasis></entry>
      <entry valign="top">
        <para>interface: string</para>
      </entry>
      <entry valign="top">Returns a control implementing the given interface
        <literal>interface</literal>. The use of this functions is deprecated
        and should be replaced by the
        <link linkend="dsp-tag-control"><command>&lt;control&gt;</command></link>
        tag.</entry>
    </row>
    <row>
      <entry valign="top">launch</entry>
      <entry valign="top">
        <para>command: string</para>
      </entry>
      <entry valign="top">Allows for safe execution of a command.  A dialog asks
        the user if they want to allow it before it may run.
      </entry>
    </row>
    <row>
      <entry valign="top">MenuItem</entry>
      <entry valign="top">
        <para>path: string</para>
        <para>label: string (optional)</para>
        <para>icon: uri (optional)</para>
        <para>callback: function (optional)</para>
        <para>args: list (optional)</para>
        <para>active: boolean (optional)</para>
      </entry>
      <entry valign="top">Constructor for <literal>MenuItem</literal> objects.
        A menu is a list of <literal>MenuItem</literal> objects.
        See <link linkend="script-menu">here</link> for how to build
        custom menus.</entry>
    </row>
    <row>
      <entry valign="top">set_config</entry>
      <entry valign="top">
        <para>key: string</para>
        <para>value: any</para>
      </entry>
      <entry valign="top">Stores the value given by <literal>value</literal>
        for the key given by <literal>key</literal>. Stored values are private
        to each display instance and are saved across sessions.</entry>
    </row>
    <row>
      <entry valign="top">Unit</entry>
      <entry valign="top">
        <para>value: float</para>
        <para>unit: enum</para>
      </entry>
      <entry valign="top">Constructor for <literal>Unit</literal> objects.
        The <literal>unit</literal> argument must be one of
        <literal>PX, CM, IN, PT, PERCENT</literal>.</entry>
    </row>
    <row>
      <entry valign="top">CM</entry>
      <entry valign="top"/>
      <entry valign="top">Enumeration value for centimeters for the
        <literal>Unit</literal> constructor.</entry>
    </row>
    <row>
      <entry valign="top">IN</entry>
      <entry valign="top"/>
      <entry valign="top">Enumeration value for inches for the
        <literal>Unit</literal> constructor.</entry>
    </row>
    <row>
      <entry valign="top">PERCENT</entry>
      <entry valign="top"/>
      <entry valign="top">Enumeration value for percentages for the
        <literal>Unit</literal> constructor. The percentage value is always
        relative to the size of the parent element.</entry>
    </row>
    <row>
      <entry valign="top">PT</entry>
      <entry valign="top"/>
      <entry valign="top">Enumeration value for (DTP) points for the
        <literal>Unit</literal> constructor (one DTP point is 1/72 inch).
        </entry>
    </row>
    <row>
      <entry valign="top">PX</entry>
      <entry valign="top"/>
      <entry valign="top">Enumeration value for pixels for the
        <literal>Unit</literal> constructor.</entry>
    </row>

  </tbody>

  </tgroup>
  </informaltable>
 
</section>

</chapter>
  <chapter xmlns:xi="http://www.w3.org/2001/XInclude" id="ctrl">
  <title>Controls</title>

  <para>This chapter describes the controls framework in detail. Here you will
    learn how to use controls, and how to write new controls.</para>

  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="ctrl-idea">
  <title>Idea</title>

<section><title>Problems</title>

  <para><application>gDesklets</application> uses
    <link linkend="script">inline-scripts</link> for dynamic content.
    Because of the
    <link linkend="script-sandbox">sandboxed scripting environment</link>,
    it is not possible to access any system resources.</para>

  <para>Many applets share some common aspects of functionality. There needs
    to be a way to share that functionality among applets without duplicating
    it.</para>

</section>



<section><title>Past</title>

  <para>The concept of <emphasis>sensors</emphasis> solved the problems in
    some way. A sensor was a reusable module of privileged (unsandboxed) code.
    </para>

  <para>However, since the sensors framework was designed long before inline
    scripting, it cannot take advantage of the property based approach, which is
    the central idea behind inline-scripting. Another problem with sensors was
    a lack of separation between functionality and design of the applet. Thus
    many sensors tend to be not reusable very well.</para>

</section>



<section><title>Solution</title>

  <para>It has become necessary to design a new framework to replace the old
    sensors framework. Instead of sensors, the new framework is about
    <emphasis>controls</emphasis>.</para>

  <para>A control is a privileged (unsandboxed) property-based module, which
    can be shared among applets, and implements certain interfaces.</para>

</section>


</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="ctrl-interface">
  <title>Calling by Interface</title>

<section><title>Interfaces</title>

  <para>When applets make use of a control, they are interested in its
    functionality, not its particular implementation. It doesn't matter which
    control gets loaded as long as the control does exactly what was expected.
    </para>

  <para>The functionality is described by <emphasis>interfaces</emphasis>
    and several implementations of an interface can exist. However, control
    authors have to make sure that two different implementations of the same
    interface provide the same functionality.</para>

</section>


<section><title>Unique Identifiers</title>

  <para>To avoid confusion and incompatibility problems, interface identifiers
    have to be globally unique. You don't have to worry about this requirement,
    however, because <application>gDesklets</application> takes care about this
    for you. It determines the identifier for
    each interface and makes sure that changes in an interface lead to a
    different unique identifier.</para>

  <para>The interface identifiers are made up of a human-readable name given
    by the interface's author, and a random-looking string. That string is
    based on a checksum of the interface and is affected by all changes to the
    interface, except for changes in comments.</para>

  <para>The identifiers might look intimidating at first, but there is no magic
    behind them and the only occasion when you get into touch with them is when
    you want to <link linkend="dsp-tag-control">load a control</link> in
    an applet. In that case, just use copy&amp;paste.</para>

  <para>Examples for interface identifiers are:</para>
  <programlisting>
ICalendar:cfw9o85ptery8egvoff6ijswc
ISystem:4i4p0jtvdz87qx44x2dm97ltj
ITime:9y703dqtfnv4w373caserz68r
  </programlisting>

  <para>They can be looked up in the
    <application>gdesklets-shell</application>, or by using the tool
    <application>test-control.py</application>. There's no need to take care
    about the identifier while writing a control.</para>

</section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="ctrl-use">
  <title>Using Controls</title>


<section><title>Calling by Interface</title>

  <para>When calling a control, <application>gDesklets</application> expects
    an interface identifier. It is up to <application>gDesklets</application>
    to pick a fitting control for you. But since you're interested in the
    functionality, not in the particular implementation, you don't have to
    worry about what you will get.</para>

  <para>For example, to call a control which implements the
    <literal>Time</literal> interface, you can write:</para>

  <programlisting><![CDATA[
<control id="myctrl" interface="ITime:9y703dqtfnv4w373caserz68r"/>
  ]]></programlisting>

  <para>The <property>id</property> attribute specifies the ID under which you
    later want to access the control in your applet. Controls are no display
    elements, thus this ID will not be put into the
    <link linkend="script-using-dsp"><literal>Dsp</literal> namespace</link>,
    but is directly accessible.</para>

</section>


<section><title>Properties</title>

  <para>Controls are property-based. There are properties where you can read
    from, and properties where you can write to. You can use the
    <application>gdesklets-shell</application> to look up the available
    properties of a control and their descriptions.</para>

  <para>By setting properties, you can e.g. change the state of a control.
    Controls can thus be seen as state-machines. Here is an example of using
    properties:</para>

  <programlisting><![CDATA[
<display>

  <control id="mytime" interface="ITime:9y703dqtfnv4w373caserz68r"/>

  <label id="lbl1"/>
  <label id="lbl2" relative-to="lbl1, y"/>

  <script>
    mytime.timezone = "Europe/Berlin"
    Dsp.lbl1.value = "Berlin: " + str(mytime.time)

    mytime.timezone = "Asia/Shanghai"
    Dsp.lbl2.value = "Shanghai: " + str(mytime.time)
  </script>

</display>

  ]]></programlisting>

  <para>State changes are not permanent and only last until you reload or close
    the applet. See <link linkend="prefs" endterm="prefs-title"/> for how to
    save the state of a control across sessions.</para>

</section>



<section id="ctrl-use-watch"><title>Watching Properties</title>

  <para>The values of properties can change from time to time. For instance,
    the <property>time</property> property of the <literal>Time</literal>
    control changes its value once a second to reflect the current time.</para>

  <para>It would be tedious and resource-consuming to write a loop for polling
    the properties at regular intervals. Controls can notify you about property
    changes, so that you just have to bind an action handler to the property
    itself.</para>

  <para>Every control provides the <property>bind(property, handler)</property>
    method, with which you can bind action handlers to properties.
    The handler will always be called automatically every time the property's
    value changes. That way you can watch the properties in which you are
    interested in. Not all properties support this, though. For some properties
    it does not make any sense to be watchable.</para>

  <programlisting><![CDATA[
...

def date_change_handler(new_value):

   print "The date has changed to %d/%d/%d." % new_value


time.bind("date", date_change_handler)

...
  ]]></programlisting>

  <para>Your handler function takes one argument which is the new value of the
    property that is being watched.</para>

</section>


</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="ctrl-write">
  <title>Writing Controls</title>

<section><title>Important Rules!</title>

  <para>Before you start publishing controls, please thoroughly read these
    rules. They make both your and the users' lives easier.</para>

  <orderedlist>
    <listitem>Before writing a new control, please check if the functionality
      you need has already been implemented by somebody else. There's no point
      in having two or more controls with different interfaces doing the same
      thing!</listitem>

    <listitem>If there already is a control doing what you want, but you want
      to make a more efficient implementation, please implement the interfaces
      of the other control to ensure backwards compatibility.</listitem>

    <listitem><emphasis>Never</emphasis> put applet-specific functionality
      into a control! Controls are meant to be shared among applets.</listitem>

    <listitem>Never publish a control without obeying rules 1 - 3!</listitem>

  </orderedlist>

</section>



<section><title>Anatomy of Controls</title>

  <para>Controls are Python classes derived from the <literal>Control</literal>
    base class and from the interfaces which they implement. The base class
    can be loaded from <literal>libdesklets.controls</literal>:</para>

  <programlisting>
from libdesklets.controls import Control
  </programlisting>

  <para>Each control has its own directory, which at least consists of the
    <filename>__init__.py</filename> file. That file initializes the control
    and provides a function <function>get_class()</function> returning the
    main class (not an instance of the class) of the control.</para>

  <para>The typical directory structure of a control looks like:</para>
  <programlisting>
MyControl/
  IMyInterface.py
  __init__.py
  </programlisting>

  <para>The control directory has to include all interface files from which the
    control inherits.
    By convention, the filenames of interface files start with an
    "<filename>I</filename>" to distinguish them from regular files.
    The file <filename>__init__.py</filename> is also mandatory. If neccessary,
    a control can also include other files as well, which are loaded by the
    initialization file. You should, however, keep in mind to design controls
    as generic as possible.</para>

</section>


<section><title>Deriving from Interfaces</title>

  <para>Every control implements one or more interfaces. Since an interface
    is a simple Python class, you just have to derive your control from the
    interface classes:</para>

  <programlisting>
from libdesklets.controls import Control
from IMyInterface import IMyInterface

class MyControl(Control, IMyInterface):

    def __init__(self):

        Control.__init__(self)
        ...

    ...


def get_class(): return MyControl
  </programlisting>

  <para>Because interfaces are implementation-less, there is no
    super-constructor to invoke for them.</para>

  <para>Always remember to derive from the <literal>Control</literal> class and
    to invoke its constructor to get a valid control class.</para>

</section>



<section><title>Implementing Properties</title>

  <para>Every property in the interfaces must be implemented by creating
    appropriate <literal>property</literal> objects.</para>

  <para>Python's <literal>property</literal> constructor takes four arguments,
    of which are all optional. From the Python inline help:</para>

  <programlisting><![CDATA[
property(fget=None, fset=None, fdel=None, doc=None) -> property attribute

# fget is a function to be used for getting an attribute value. Likewise,
# fset is a function for setting an attribute and fdel is a function for
# deleting an attribute.  Typical use is to define a managed attribute x:
class C(object):
    def getx(self): return self.__x
    def setx(self, value): self.__x = value
    def delx(self): del self.__x
    x = property(getx, setx, delx, "I'm the 'x' property.")
  ]]></programlisting>

  <para>The <literal>fdel</literal> argument is not needed for controls.
    If a property is not readable, you also omit the <literal>fget</literal>
    argument or set it to <literal>None</literal>. Likewise, for non-writable
    properties, omit the <literal>fset</literal> argument. The read-write
    permissions must match those
    <link linkend="ctrl-write-interface-declare">declared by the interfaces.</link>
    </para>

  <para>The <literal>doc</literal> argument can be used for describing the
    property in human-readable form. It is highly recommended to give a
    useful description for every property. Doing so makes it easier for
    others to use your control.</para>
</section>



<section><title>Methods of the Control Class</title>

  <para>The <literal>Control</literal> class provides you with all you need for
    writing compliant controls. The following methods can be used inside
    controls:</para>

  <informaltable frame="topbot">
  <tgroup>

  <thead>
    <row>
      <entry>Method Name</entry>
      <entry>Arguments</entry>
      <entry>Description</entry>
    </row>
  </thead>

  <tbody>
    <row>
      <entry valign="top">__init__</entry>
      <entry valign="top"/>
      <entry valign="top">The constructor of the <literal>Control</literal>.
        This always has to be called as the super-constructor within the
        constructor.</entry>
    </row>
    <row>
      <entry valign="top">_add_timer</entry>
      <entry valign="top">
        <para>interval: integer</para>
        <para>callback: function</para>
        <para>*args</para>
      </entry>
      <entry valign="top">This is a convenience function for adding a timeout
        handler which gets called after <literal>interval</literal> milliseconds.
        If the <literal>callback</literal> function returns
        <literal>True</literal>, the callback will be called again after the
        next timeout. This method returns an ID which can be used with
        <function>_remove_timer()</function> to remove the timer again.</entry>
    </row>
    <row>
      <entry valign="top">_remove_timer</entry>
      <entry valign="top">
        <para>ident: integer</para>
      </entry>
      <entry valign="top">Removes the timer with the given ID
        <literal>ident</literal>.</entry>
    </row>
    <row>
      <entry valign="top">_shutdown</entry>
      <entry valign="top"/>
      <entry valign="top">This is a hook method which can be overridden in
        order to perform cleanup operations before the control is being closed.
        </entry>
    </row>
    <row>
      <entry valign="top">_update</entry>
      <entry valign="top">
        <para>prop: string</para>
      </entry>
      <entry valign="top">Notifies observers of property <literal>prop</literal>
        that the value has changed. You have to call this method whenever
        a property which is watchable using
        <link linkend="ctrl-use-watch"><function>bind()</function></link>
        changes its value.
        Of course it does not make sense for all properties to be watchable.
        Always call this method <emphasis>after</emphasis> the change has
        actually taken place.</entry>
    </row>

  </tbody>

  </tgroup>
  </informaltable>

</section>


</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="ctrl-write-interface">
  <title>Writing Interfaces</title>

<section><title>Anatomy of an Interface</title>

  <para>A control interface file is a Python module whose name, by convention,
    starts with an "<filename>I</filename>". The module contains a class of the
    same name without any implementations, deriving from the
    <literal>Interface</literal> base class. It only contains comments and
    declarations of properties.</para>

  <para>The neccessary classes <literal>Interface</literal> and
    <literal>Permission</literal> can both be loaded from
    <literal>libdesklets.controls</literal>:</para>

  <programlisting>
from libdesklets.controls import Interface, Permission
  </programlisting>

</section>



<section id="ctrl-write-interface-declare"><title>Declaring Properties</title>

  <para>A property declaration consist of the property's name along with its
    access permission. The valid permissions are:</para>

  <itemizedlist>
    <listitem><literal>Permission.READ</literal>
      - the property is read-only</listitem>
    <listitem><literal>Permission.WRITE</literal>
      - the property is write-only</listitem>
    <listitem><literal>Permission.READWRITE</literal>
      - the property is readable and writable</listitem>
  </itemizedlist>

  <para>A property is declared by assigning the appropriate permission object
    to its name, like this:</para>

  <programlisting>
myproperty = Permission.READWRITE
  </programlisting>

</section>



<section><title>Deriving from Interfaces</title>

  <para>Interfaces can extend other interfaces by deriving from them. A control
    implementing the extended interface automatically implements the original
    interface, too.</para>

  <para>Since interfaces are classes, you just have to load the original class
    and derive from it:</para>

  <programlisting>
from IOriginal1 import IOriginal1
from IOriginal2 import IOriginal2

class IExtended(IOriginal1, IOriginal2):

    ...
  </programlisting>

  <para>It is an error if a property is declared more than once in the
    class hierarchy.</para>

  <para>Please include the original interface files with your control as well,
    since they are required for running the control.</para>

</section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="ctrl-included">
  <title>Included Controls</title>

<section><title>Overview</title>

  <para>gDesklets provides a basic set of Controls which can be used
    out-of-the-box. The following list shows all currently included Controls
    and their interface identifiers followed by more detailed information on
    each Control.</para>

  <programlisting>
IArrayBuffer:10i2docuzddulm08s5h8qho3o-2
ICalendar:edslroj9o537asmjt8g2i7kse-2
IEventPipe:1v11pn3wj3jk1tmnnvl312sg3-2
IHDDTemp:6da6kg9xaciyyv0xvpexg8hyp-2
IRandom:bss2bsoo8o0dl3kumdpegtrc2-2
ISensor:blbed9sqifj2dnabrwpbd7guz-2
ISystem:4zcicmk4botcub7iypo46t2l7-2
ITime:7qktelp6tw29ve5p8q3lxn6bs-2
IURI:3mufry4gxx4vihs2dufszo21p-2
  </programlisting>

</section>


<section><title>ArrayBuffer</title>

  <para>An object buffer that makes it easier to scroll and update arrays of
    objects.</para>

  <programlisting>
IArrayBuffer:10i2docuzddulm08s5h8qho3o-2

  cursor                   rw  Get/Set cursor position 
  delete                   w   Delete line from buffer 
  fill                     w   Fill the buffer with an object 
  filltype                 rw  Get/Set the empty space fill type 
  read                     r   Return the viewable window array 
  read_all                 r   Return the entire buffer array 
  size                     rw  Get/Set buffer size 
  window_pos               rw  Get/Set viewable window position 
  window_size              rw  Get/Set viewable window size 
  write                    w   Write line at position cursor 
  </programlisting>

</section>


<section><title>Calendar</title>

  <para>no description</para>

  <programlisting>
ICalendar:edslroj9o537asmjt8g2i7kse-2

  day                      r   no description 
  days                     r   no description 
  month                    r   no description 
  months                   r   no description 
  time                     w   no description 
  </programlisting>

</section>


<section><title>EventPipe</title>

  <para>Control for piping events to other desklets.</para>

  <para>This control acts as a hub providing a push based notification system with
    different channels of interests.</para>

  <para>You can use this control to subscribe to channels in order to automatically
    receive messages:</para>

  <programlisting>epipe.subscriptions = ["SideCandy", "System"]
  </programlisting>

  <para>By binding a handler to the "event" property, you can receive broadcasted
    messages:</para>

  <programlisting>epipe.bind("event", on_epipe_message)</programlisting>

  <para>In order to broadcast a message to other desklets, you put the message into
    the "event" property:</para>

  <programlisting>epipe.event = ("SideCandy", "my message")</programlisting>

  <para>A message is a list of elements, where the first element is the name of the
    channel, and the second is the name of the message. The list may also
    contain further, arbitrary elements, but the channel and the message name
    must be strings.</para>

  <programlisting>
IEventPipe:1v11pn3wj3jk1tmnnvl312sg3-2

  event                    rw  no description 
  subscriptions            rw  The subscribed channels 
  </programlisting>

  <para>The <quote>event</quote> property is bindable.</para>

</section>


<section><title>HDDTemp</title>

  <para>Control for retrieving HDD temperature from a local hddtemp daemon.</para>

  <programlisting>
IHDDTemp:6da6kg9xaciyyv0xvpexg8hyp-2

  available_devices        r   no description 
  device                   rw  no description 
  poll                     r   no description 
  poll_all                 r   no description 
  </programlisting>

</section>


<section><title>Random</title>

  <para>This Control provides pseudo-random number generators for various distributions implemented by python's Random module.</para>

  <programlisting><![CDATA[
IRandom:bss2bsoo8o0dl3kumdpegtrc2-2

  betavariate              r   Beta distribution. Conditions on the parameters are alpha > 0 and beta > 0. Returned values range between 0 and 1. Sequence: (alpha, beta). 
  choice                   r   Return a random element from the non-empty sequence seq. Sequence: (seq).  
  expovariate              r   Exponential distribution. lambd is 1.0 divided by the desired mean. Sequence: (lambd, ). 
  gammavariate             r   Gamma distribution. (Not the gamma function!) Conditions on the parameters are alpha > 0 and beta > 0. Sequence: (alpha, beta). 
  gauss                    r   Gaussian distribution. mu is the mean, and sigma is the standard deviation. Sequence: (mu, sigma). 
  lognormvariate           r   Log normal distribution. Sequence: (mu, sigma). 
  normalvariate            r   Normal distribution. mu is the mean, and sigma is the standard deviation. Sequence: (mu, sigma). 
  paretovariate            r   Pareto distribution. alpha is the shape parameter. Sequence: (alpha, ). 
  randint                  r   Return a random integer N such that a <= N <= b. Sequence: (a, b). 
  random                   r   Return the next random floating point number in the range [0.0, 1.0). Sequence: (). 
  randrange                r   Return a randomly selected element from range(start, stop, step). Sequence: (start, stop, step). 
  sample                   r   Return a k length list of unique elements chosen from the population sequence. Sequence: (population, k). 
  sequence                 rw  The sequence/tuple to be used. 
  uniform                  r   Return a random real number N such that a <= N < b. Sequence: (a, b). 
  vonmisesvariate          r   mu is the mean angle, expressed in radians between 0 and 2*pi, and kappa is the concentration parameter, which must be greater than or equal to zero. Sequence: (mu, kappa). 
  weibullvariate           r   Weibull distribution. alpha is the scale parameter and beta is the shape parameter. Sequence: (alpha, beta). 
  ]]></programlisting>

</section>


<section><title>Sensor</title>

  <warning>
    <para>This control wraps legacy sensors to make them still usable.
      Sensors are deprecated and shouldn't be used in new stuff. This control is
      solely meant for retaining backwards compatibility.</para>
  </warning>

  <programlisting>
ISensor:blbed9sqifj2dnabrwpbd7guz-2

  action                   w   the action to perform 
  config_id                w   the config ID 
  configurator             r   the configurator of the sensor 
  menu                     r   the menu data of the sensor 
  output                   r   the output data of the sensor 
  sensor                   w   the sensor 
  stop                     w   stops the sensor 
  </programlisting>

  <para>The <quote>output</quote> and <quote>menu</quote> properties are
    bindable.</para>

</section>


<section><title>System</title>

  <para>This Control offers access to a lot of information about the System and
    its current state.</para>

  <programlisting>
ISystem:4zcicmk4botcub7iypo46t2l7-2

  allfs                    rw  Getter/Setter for boolean allfs 
  cpu                      r   General CPU info 
  cpu_bogomips             r   CPU bogomips 
  cpu_cache                r   CPU 2nd level cache 
  cpu_clock                r   CPU clock 
  cpu_load                 r   CPU load 
  cpu_model                r   CPU model 
  fsusage                  r   Information of given mounted filesystem 
  hostname                 r   The machine's hostname 
  iface                    rw  Getter/Setter for network interface 
  kernel_version           r   Kernel version 
  loadavg                  r   Average load info 
  memory                   r   Memory information 
  mountdir                 rw  Getter/Setter for mountdir 
  mountlist                r   (All) mountpoints 
  net_devices              r   Available network devs 
  net_load                 r   Netload of given device 
  net_speed                r   Incoming / Outgoing traffic speed of given device 
  net_state                r   Device up or down 
  operating_system         r   Type of operating system 
  pid                      rw  Getter/Setter for pid 
  ppp                      r   Point-to-Point information 
  proc_args                r   Command line args of process ID 
  proc_kernel              r   no description 
  proc_list                r   no description 
  proc_map                 r   no description 
  proc_mem                 r   no description 
  proc_segment             r   no description 
  proc_signal              r   no description 
  proc_state               r   no description 
  proc_time                r   no description 
  proc_uid                 r   no description 
  swap                     r   Swap space information 
  uptime                   r   Uptime information 
  users                    r   Number of users 
  which                    rw  Getter/Setter for which 
  </programlisting>

  <para>The <quote>allfs</quote>, <quote>device</quote>, <quote>mountdir</quote>,
    <quote>pid</quote> and <quote>which</quote> properties are bindable.</para>

</section>


<section><title>Time</title>

  <para>Control for current time and date information.</para>

  <programlisting>
ITime:5oak91gpdt1dyiepbqmn48plp-2

  date                     r   the current date (y, m, d) 
  ticks                    r   the current ticks in floating point numbers 
  time                     r   the current time (h, m, s) 
  timezone                 rw  the timezone 
  </programlisting>

  <para>The <quote>date</quote>, <quote>time</quote> and <quote>timezone</quote> properties are bindable.</para>

</section>


<section><title>URI</title>

  <para>A Control to read out data from a file.</para>

  <programlisting>
IURI:3mufry4gxx4vihs2dufszo21p-2

  file                     rw  raw file content 
  raw                      r   raw file content 
  splitted                 r   splitted file content 
  stripped                 r   stripped file content 
  </programlisting>

</section>


</section>

</chapter>
  <chapter xmlns:xi="http://www.w3.org/2001/XInclude" id="prefs">
  <title id="prefs-title">Preferences</title>

  <para>The preferences system allows to save user preferences across sessions.
    This chapter describes how to setup preferences.</para>

  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="prefs-system">
  <title>Preferences System</title>

<section><title>Preferences Dialog</title>

  <para>Every applet can provide a dialog where users can change the
    configuration.
    This dialog usually consists of several pages for different categories,
    and is defined in the <filename>.display</filename> file inside the
    <link linkend="prefs-tag-prefs"><command>&lt;prefs&gt;</command></link>
    tag.</para>

  <para>Each of the pages lists a number of configuration elements, such as
    entry fields, spin buttons, file selectors, font selectors, etc.</para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/prefs" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>

</section>



<section><title>Bindings</title>

  <para>Every configuration element is directly bound to a readable and
    writable object in the scripting environment. This can be a control property
    as well as a display element's property, or just a variable in the scripts.
    </para>

  <para>The bound object is where you can read the configuration setting from.
    The direct binding can be seen in the following example.</para>

  <programlisting><![CDATA[
<display>

  <label id="mylabel" value="Change me!" font="Serif 1cm"/>


  <prefs>

    <string label="Label Text:" bind="Dsp.mylabel.value"/>

  </prefs>

</display>
  ]]></programlisting>

  <para>After opening the preferences dialog, you can change the value of the
    label by editing the string configuration element. If you restart the
    display or <application>gDesklets</application>, you will see that the
    current label text has been saved.</para>

  <para>That way it is possible to save the configuration of any object across
    sessions.</para>

</section>



<section><title>Default Value</title>

  <para>The default value for any configuration setting is the initial value of
    the object to which it is bound. The settings are read in after the
    initialization of the display. So, if values were saved, the bound objects
    will be set to them immediately after the initialization phase.</para>

</section>



<section><title>Callback Function</title>

  <para>Sometimes, it is neccessary to react to configuration changes in a
    special way. For example, an URI should be checked for validity before it
    is actually being used. The
    <link linkend="prefs-tag-prefs"><command>&lt;prefs&gt;</command></link> tag,
    as well as all other preferences tags, provides a callback hook for that 
    purpose.</para>
  
  <para>It may also be beneficial to change preferences when others change.  
    This can be done with the <literal>Prefs</literal> namespace.</para>

  <programlisting><![CDATA[
<prefs callback="prefs_cb">
  
  <page label="Test">
  
    <boolean id="ex_bool" label="Checkbox!" bind="ex_bool_is_set" callback="check_ex_bool"/>
  
    <enum id="e" label="some enum" bind="foo"/>
  
  </page>
  
</prefs>

<script>

  Prefs.e.items = [(label, value), (label, value), (label, value)]
  Prefs.ex_bool.value = False

</script>

]]></programlisting>

  <para>The callback function specified in the hook will be called whenever
    a configuration setting changes its value. The callback function is called
    with two arguments; the name of the bound object, and the new value.</para>

</section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="prefs-tag-prefs">
  <title>&lt;prefs&gt;</title>

  <para>The root element of the preferences dialog. It has to be a child
    tag of the <link linkend="dsp-tag-display">&lt;display&gt;</link> tag.
    </para>



  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">callback</entry>
        <entry valign="top">function</entry>
        <entry valign="top"/>
        <entry valign="top">A callback function which is called every time a
          preferences value changes. The callback takes the name of the bound
          property and the new value as arguments.</entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>



  <section><title>Examples</title>

    <programlisting><![CDATA[
...

<prefs callback="mycallback">

  <string label="Name:" bind="myname"/>

</prefs>


<script>

  # the initial default value
  myname = "No Name"

  def mycallback(key, value):
      if (key == "myname"): print "Name changed to:", value

</script>

...
    ]]></programlisting>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="prefs-tag-page">
  <title>&lt;page&gt;</title>

  <para>A page of settings in the configuration dialog. Pages can be used
    for grouping configuration elements together.</para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/prefs-page" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>


  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">icon</entry>
        <entry valign="top">URI</entry>
        <entry valign="top"/>
        <entry valign="top">URI where to load the icon from.</entry>
      </row>

      <row>
        <entry valign="top">label</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The label text on the tab.</entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>



  <section><title>Examples</title>

    <programlisting><![CDATA[
<prefs>
  <page label="gDesklets" icon="gdesklets.png">
    <boolean label="Foo:" bind="foo"/>
  </page>

  <page label="No Icon">
    <boolean label="Bar:" bind="bar"/>
  </page>
</prefs>
    ]]></programlisting>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="prefs-tag-title">
  <title>&lt;title&gt;</title>

  <para>A section title text in the dialog.</para>



  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">label</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The title text.</entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>



  <section><title>Examples</title>

    <programlisting><![CDATA[
<prefs>

  <title label="Appearance"/>

  <uri label="Background Image:" bind="Dsp.win.bg_uri"/>

  <enum label="Style:" bind="style">
    <item label="Classic" value="classic"/>
    <item label="Modern" value="modern"/>
  </enum>

</prefs>
    ]]></programlisting>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="prefs-tag-boolean">
  <title>&lt;boolean&gt;</title>

  <para>A boolean setting. Its representation in the dialog is a check box.
    </para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/prefs-boolean" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>


  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">bind</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The name of the variable or property to which the
          configuration element is bound.</entry>
      </row>
      <row>
        <entry valign="top">callback</entry>
        <entry valign="top">function</entry>
        <entry valign="top"/>
        <entry valign="top">A callback function which is called every time
          the value changes. The callback takes the name of the bound
          property and the new value as arguments.</entry>
      </row>
      <row>
        <entry valign="top">enabled</entry>
        <entry valign="top">boolean</entry>
        <entry valign="top">true</entry>
        <entry valign="top">Whether the config item is enabled. Disabled items
          appear greyed out.</entry>
      </row>
      <row>
        <entry valign="top">help</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The tooltip text for the element in the
          configuration dialog.</entry>
      </row>
      <row>
        <entry valign="top">label</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The label text for the element in the
          configuration dialog.</entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>



  <section><title>Examples</title>

    <programlisting><![CDATA[
<boolean label="Display timezone" bind="Dsp.tz.visible"/>
    ]]></programlisting>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="prefs-tag-color">
  <title>&lt;color&gt;</title>

  <para>A color setting. Its representation is a color selection widget.
    </para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/prefs-color" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>


  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">bind</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The name of the variable or property to which the
          configuration element is bound.</entry>
      </row>
      <row>
        <entry valign="top">callback</entry>
        <entry valign="top">function</entry>
        <entry valign="top"/>
        <entry valign="top">A callback function which is called every time
          the value changes. The callback takes the name of the bound
          property and the new value as arguments.</entry>
      </row>
      <row>
        <entry valign="top">enabled</entry>
        <entry valign="top">boolean</entry>
        <entry valign="top">true</entry>
        <entry valign="top">Whether the config item is enabled. Disabled items
          appear greyed out.</entry>
      </row>
      <row>
        <entry valign="top">help</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The tooltip text for the element in the
          configuration dialog.</entry>
      </row>
      <row>
        <entry valign="top">label</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The label text for the element in the
          configuration dialog.</entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>



  <section><title>Examples</title>

    <programlisting><![CDATA[
<color label="Text color:" bind="Dsp.tz.color"/>
    ]]></programlisting>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="prefs-tag-date">
  <title>&lt;date&gt;</title>

  <para>A date setting. Its representation is a date selection widget.
    </para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/prefs-date" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>

  <important>
    <para>The 'official' (and only supported) gDesklets date format is <emphasis role="bold">"DD/MM/YYYY HH:MM:SS" !</emphasis>
      </para>
  </important>


  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">bind</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The name of the variable or property to which the
          configuration element is bound.</entry>
      </row>
      <row>
        <entry valign="top">callback</entry>
        <entry valign="top">function</entry>
        <entry valign="top"/>
        <entry valign="top">A callback function which is called every time
          the value changes. The callback takes the name of the bound
          property and the new value as arguments.</entry>
      </row>
      <row>
        <entry valign="top">enabled</entry>
        <entry valign="top">boolean</entry>
        <entry valign="top">true</entry>
        <entry valign="top">Whether the config item is enabled. Disabled items
          appear greyed out.</entry>
      </row>
      <row>
        <entry valign="top">help</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The tooltip text for the element in the
          configuration dialog.</entry>
      </row>
      <row>
        <entry valign="top">label</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The label text for the element in the
          configuration dialog.</entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>



  <section><title>Examples</title>

    <programlisting><![CDATA[
<prefs>

    <date label="Date:" bind="date" help="The date of your choice."/>

</prefs>

<script>

    date = "07/13/2007 19:15:02"

</script>
    ]]></programlisting>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="prefs-tag-enum">
  <title>&lt;enum&gt;</title>

  <para>An enumeration setting. Its representation is a dropdown list widget
    with items defined by <link linkend="prefs-tag-item">&lt;item&gt;</link>
    child tags.</para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/prefs-enum" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>


  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">bind</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The name of the variable or property to which the
          configuration element is bound.</entry>
      </row>
      <row>
        <entry valign="top">callback</entry>
        <entry valign="top">function</entry>
        <entry valign="top"/>
        <entry valign="top">A callback function which is called every time the
          value changes. The callback takes the name of the bound property and
          the new value as arguments.</entry>
      </row>
      <row>
        <entry valign="top">enabled</entry>
        <entry valign="top">boolean</entry>
        <entry valign="top">true</entry>
        <entry valign="top">Whether the config item is enabled. Disabled items
          appear greyed out.</entry>
      </row>
      <row>
        <entry valign="top">help</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The tooltip text for the element in the
          configuration dialog.</entry>
      </row>
      <row>
        <entry valign="top">label</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The label text for the element in the
          configuration dialog.</entry>
      </row>
      <row>
        <entry valign="top">items</entry>
        <entry valign="top">tuple</entry>
        <entry valign="top"/>
        <entry valign="top">The items which are children of an enum can be
          accessed via this variable. You will get a list of tuples in the form
          of (label, value).</entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>



  <section><title>Examples</title>

    <programlisting><![CDATA[
<enum label="Face:" bind="clockface" help="What the clock looks like.">

  <item label="Plain" value="clock.png"/>
  <item label="gDesklets" value="gdclock.png"/>
  <item label="Royal Air Force" value="rafclock.png"/>
  <item label="GNOME" value="gnomeclock.png"/>
  <item label="OS-X" value="osXclock.png"/>
  <item label="Grandpa's pocket watch" value="pocketwatch.png"/>

</enum>
    ]]></programlisting>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="prefs-tag-float">
  <title>&lt;float&gt;</title>

  <para>A floating point setting. Its representation is a spin button.
    </para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/prefs-float" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>


  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">bind</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The name of the variable or property to which the
          configuration element is bound.</entry>
      </row>
      <row>
        <entry valign="top">digits</entry>
        <entry valign="top">integer</entry>
        <entry valign="top">2</entry>
        <entry valign="top">The number of decimal digits.</entry>
      </row>
      <row>
        <entry valign="top">callback</entry>
        <entry valign="top">function</entry>
        <entry valign="top"/>
        <entry valign="top">A callback function which is called every time
          the value changes. The callback takes the name of the bound
          property and the new value as arguments.</entry>
      </row>
      <row>
        <entry valign="top">enabled</entry>
        <entry valign="top">boolean</entry>
        <entry valign="top">true</entry>
        <entry valign="top">Whether the config item is enabled. Disabled items
          appear greyed out.</entry>
      </row>
      <row>
        <entry valign="top">help</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The tooltip text for the element in the
          configuration dialog.</entry>
      </row>
      <row>
        <entry valign="top">label</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The label text for the element in the
          configuration dialog.</entry>
      </row>
      <row>
        <entry valign="top">min</entry>
        <entry valign="top">float</entry>
        <entry valign="top">0.0</entry>
        <entry valign="top">The minimal value allowed.</entry>
      </row>
      <row>
        <entry valign="top">max</entry>
        <entry valign="top">float</entry>
        <entry valign="top">9999.0</entry>
        <entry valign="top">The maximal value allowed.</entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>



  <section><title>Examples</title>

    <programlisting><![CDATA[
<float label="Size:" bind="size" min="0.5" max="50.0"
       help="The size of the clockface."/>
    ]]></programlisting>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="prefs-tag-font">
  <title>&lt;font&gt;</title>

  <para>A font setting. Its representation is a font selection widget.
    </para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/prefs-font" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>


  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">bind</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The name of the variable or property to which the
          configuration element is bound.</entry>
      </row>
      <row>
        <entry valign="top">callback</entry>
        <entry valign="top">function</entry>
        <entry valign="top"/>
        <entry valign="top">A callback function which is called every time
          the value changes. The callback takes the name of the bound
          property and the new value as arguments.</entry>
      </row>
      <row>
        <entry valign="top">enabled</entry>
        <entry valign="top">boolean</entry>
        <entry valign="top">true</entry>
        <entry valign="top">Whether the config item is enabled. Disabled items
          appear greyed out.</entry>
      </row>
      <row>
        <entry valign="top">help</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The tooltip text for the element in the
          configuration dialog.</entry>
      </row>
      <row>
        <entry valign="top">label</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The label text for the element in the
          configuration dialog.</entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>



  <section><title>Examples</title>

    <programlisting><![CDATA[
<font label="Font:" bind="Dsp.tz.font"/>
    ]]></programlisting>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="prefs-tag-info">
  <title>&lt;info&gt;</title>

  <para>An information text in the dialog with pango markup support.</para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/prefs-info" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>


  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">bind</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The name of the variable or property to which the
          configuration element is bound.</entry>
      </row>
      <row>
        <entry valign="top">help</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The tooltip text for the element in the
          configuration dialog.</entry>
      </row>
      <row>
        <entry valign="top">label</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The label text for the element in the configuration
          dialog. Supports pango markup.</entry>
      </row>
      <row>
        <entry valign="top">wrap</entry>
        <entry valign="top">boolean</entry>
        <entry valign="top">true</entry>
        <entry valign="top">Whether the text should be wrapped or not.</entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>



  <section><title>Examples</title>

    <programlisting><![CDATA[
<info id="info"
      label="Information:"
      value="Whatever you think is useful."
      bind="info" />

<info id="info1"
      label="&lt;i&gt;What about&lt;/i&gt; &lt;b&gt;Pango support&lt;/b&gt;?"
      value="&lt;span foreground='#FF0000' background='blue' size='10000'&gt;Pango&lt;/span&gt; is &lt;u&gt;fully&lt;/u&gt; supported on &lt;big&gt;both&lt;/big&gt; &lt;sup&gt;label&lt;/sup&gt; and &lt;sub&gt;value&lt;/sub&gt;!"
      bind="info1" />

<info id="info2"
      label="But remember:"
      value="You are in XML and so you will have to substitute some characters!"
      bind="info2" />
    ]]></programlisting>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="prefs-tag-integer">
  <title>&lt;integer&gt;</title>

  <para>An integer value setting. Its representation is a spin button.
    </para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/prefs-integer" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>


  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">bind</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The name of the variable or property to which the
          configuration element is bound.</entry>
      </row>
      <row>
        <entry valign="top">callback</entry>
        <entry valign="top">function</entry>
        <entry valign="top"/>
        <entry valign="top">A callback function which is called every time
          the value changes. The callback takes the name of the bound
          property and the new value as arguments.</entry>
      </row>
      <row>
        <entry valign="top">enabled</entry>
        <entry valign="top">boolean</entry>
        <entry valign="top">true</entry>
        <entry valign="top">Whether the config item is enabled. Disabled items
          appear greyed out.</entry>
      </row>
      <row>
        <entry valign="top">help</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The tooltip text for the element in the
          configuration dialog.</entry>
      </row>
      <row>
        <entry valign="top">label</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The label text for the element in the
          configuration dialog.</entry>
      </row>
      <row>
        <entry valign="top">min</entry>
        <entry valign="top">integer</entry>
        <entry valign="top">0</entry>
        <entry valign="top">The minimal value allowed.</entry>
      </row>
      <row>
        <entry valign="top">max</entry>
        <entry valign="top">integer</entry>
        <entry valign="top">9999</entry>
        <entry valign="top">The maximal value allowed.</entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>



  <section><title>Examples</title>

    <programlisting><![CDATA[
<integer label="MTU:" bind="mtu" min="46" max="1500"/>
    ]]></programlisting>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="prefs-tag-item">
  <title>&lt;item&gt;</title>

  <para>An enumeration item for use in the
    <link linkend="prefs-tag-enum">&lt;enum&gt;</link> and
    <link linkend="prefs-tag-radio">&lt;radio&gt;</link> tag.</para>



  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">label</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The label text for the item in the dropdown list.
          </entry>
      </row>
      <row>
        <entry valign="top">value</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The value associated with the item.
          </entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>



  <section><title>Examples</title>

    <para>Please see
      <link linkend="prefs-tag-enum"><command>&lt;enum&gt;</command></link>.
      </para>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="prefs-tag-list">
  <title>&lt;list&gt;</title>

  <para>A list setting. Its representation is a TreeView / ListStore widget
    with items defined by <link linkend="prefs-tag-item">&lt;item&gt;</link>
    child tags.</para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/prefs-list" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>


  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">bind</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The name of the variable or property to which the
          configuration element is bound.</entry>
      </row>
      <row>
        <entry valign="top">callback</entry>
        <entry valign="top">function</entry>
        <entry valign="top"/>
        <entry valign="top">A callback function which is called every time
          the value changes. The callback takes the name of the bound
          property and the new value as arguments.</entry>
      </row>
      <row>
        <entry valign="top">enabled</entry>
        <entry valign="top">boolean</entry>
        <entry valign="top">true</entry>
        <entry valign="top">Whether the config item is enabled. Disabled items
          appear greyed out.</entry>
      </row>
      <row>
        <entry valign="top">help</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The tooltip text for the element in the
          configuration dialog.</entry>
      </row>
      <row>
        <entry valign="top">label</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The label text for the element in the
          configuration dialog.</entry>
      </row>
      <row>
        <entry valign="top">items</entry>
        <entry valign="top">tuple</entry>
        <entry valign="top"/>
        <entry valign="top">The items which are children of a list can be
          accessed via this variable. You will get a list of tuples in the form
          of (label, value).</entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>



  <section><title>Examples</title>

    <programlisting><![CDATA[
<list label="My simple List" bind="my_simple_list" help="Choose the fruits you like.">
  <item label="Apples" value="apples"/>
  <item label="Bananas" value="bananas"/>
  <item label="Pears" value="pears"/>
</list>
    ]]></programlisting>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="prefs-tag-radio">
  <title>&lt;radio&gt;</title>

  <para>A radio setting. Its representation is a radio selection widget
    with items defined by <link linkend="prefs-tag-item">&lt;item&gt;</link>
    child tags.
    </para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/prefs-radio" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>


  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">bind</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The name of the variable or property to which the
          configuration element is bound.</entry>
      </row>
      <row>
        <entry valign="top">callback</entry>
        <entry valign="top">function</entry>
        <entry valign="top"/>
        <entry valign="top">A callback function which is called every time
          the value changes. The callback takes the name of the bound
          property and the new value as arguments.</entry>
      </row>
      <row>
        <entry valign="top">enabled</entry>
        <entry valign="top">boolean</entry>
        <entry valign="top">true</entry>
        <entry valign="top">Whether the config item is enabled. Disabled items
          appear greyed out.</entry>
      </row>
      <row>
        <entry valign="top">help</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The tooltip text for the element in the
          configuration dialog.</entry>
      </row>
      <row>
        <entry valign="top">label</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The label text for the element in the
          configuration dialog.</entry>
      </row>
      <row>
        <entry valign="top">items</entry>
        <entry valign="top">tuple</entry>
        <entry valign="top"/>
        <entry valign="top">The items which are children of an radio can be accessed via this
          variable. You will get a list of tuples in the form of 
          (label, value).</entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>



  <section><title>Examples</title>

    <programlisting><![CDATA[
<radio id="radio" label="Accept cookies: " bind="cookies" >

    <item label="Always" value="always"/>
    <item label="Ask me" value="ask_me"/>
    <item label="Never" value="never"/>

</radio>
    ]]></programlisting>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="prefs-tag-string">
  <title>&lt;string&gt;</title>

  <para>A string value setting. Its representation is a text entry field.
    </para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/prefs-string" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>


  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">bind</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The name of the variable or property to which the
          configuration element is bound.</entry>
      </row>
      <row>
        <entry valign="top">callback</entry>
        <entry valign="top">function</entry>
        <entry valign="top"/>
        <entry valign="top">A callback function which is called every time
          the value changes. The callback takes the name of the bound
          property and the new value as arguments.</entry>
      </row>
      <row>
        <entry valign="top">enabled</entry>
        <entry valign="top">boolean</entry>
        <entry valign="top">true</entry>
        <entry valign="top">Whether the config item is enabled. Disabled items
          appear greyed out.</entry>
      </row>
      <row>
        <entry valign="top">help</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The tooltip text for the element in the
          configuration dialog.</entry>
      </row>
      <row>
        <entry valign="top">label</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The label text for the element in the
          configuration dialog.</entry>
      </row>
      <row>
        <entry valign="top">password</entry>
        <entry valign="top">boolean</entry>
        <entry valign="top">false</entry>
        <entry valign="top">Whether this is a password field or not.</entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>



  <section><title>Examples</title>

    <programlisting><![CDATA[
<string label="Timezone:" bind="time.timezone"
        help="The timezone which will be used."/>

<string label="Password" bind="pass" password="true"
        help="Your password"/>
    ]]></programlisting>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="prefs-tag-toggle">
  <title>&lt;radio&gt;</title>

  <para>A toggle setting. Its representation is a toggle selection widget
    with items defined by <link linkend="prefs-tag-item">&lt;item&gt;</link>
    child tags.
    </para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/prefs-toggle" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>


  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">bind</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The name of the variable or property to which the
          configuration element is bound.</entry>
      </row>
      <row>
        <entry valign="top">callback</entry>
        <entry valign="top">function</entry>
        <entry valign="top"/>
        <entry valign="top">A callback function which is called every time
          the value changes. The callback takes the name of the bound
          property and the new value as arguments.</entry>
      </row>
      <row>
        <entry valign="top">enabled</entry>
        <entry valign="top">boolean</entry>
        <entry valign="top">true</entry>
        <entry valign="top">Whether the config item is enabled. Disabled items
          appear greyed out.</entry>
      </row>
      <row>
        <entry valign="top">help</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The tooltip text for the element in the
          configuration dialog.</entry>
      </row>
      <row>
        <entry valign="top">label</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The label text for the element in the
          configuration dialog.</entry>
      </row>
      <row>
        <entry valign="top">items</entry>
        <entry valign="top">tuple</entry>
        <entry valign="top"/>
        <entry valign="top">The items which are children of an toggle can be accessed via this
          variable. You will get a list of tuples in the form of 
          (label, value).</entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>



  <section><title>Examples</title>

    <programlisting><![CDATA[
<toggle id="mytoggle" label="Borders" bind="mytoggle" enabled="True" >
    <item label="Left" value="left"/>
    <item label="Right" value="right"/>
    <item label="Top" value="top"/>
    <item label="Bottom" value="bottom"/>
</toggle>
    ]]></programlisting>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="prefs-tag-unit">
  <title>&lt;unit&gt;</title>

  <para>A configuration item for setting geometry values. The user can enter
    a value and select from the supported measurement units.
    </para>

  <!--
  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/prefs-float" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>
  -->

  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">as_cm()</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The value of the unit in centimeters.</entry>
      </row>
      <row>
        <entry valign="top">as_in()</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The value of the unit in inches.</entry>
      </row>
      <row>
        <entry valign="top">as_percent()</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The value of the unit as a percentage of it's 
          parent container's size.</entry>
      </row>
      <row>
        <entry valign="top">as_pt()</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The value of the unit in DTP points (1 pt = 1/72 inch).</entry>
      </row>
      <row>
        <entry valign="top">as_px()</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The value of the unit in pixels.</entry>
      </row>
      <row>
        <entry valign="top">bind</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The name of the variable or property to which the
          configuration element is bound.</entry>
      </row>
      <row>
        <entry valign="top">digits</entry>
        <entry valign="top">integer</entry>
        <entry valign="top">2</entry>
        <entry valign="top">The number of decimal digits.</entry>
      </row>
      <row>
        <entry valign="top">callback</entry>
        <entry valign="top">function</entry>
        <entry valign="top"/>
        <entry valign="top"> A callback function which is called every time
          the value changes. The callback takes the name of the bound
          property and the new value as arguments.</entry>
      </row>
      <row>
        <entry valign="top">enabled</entry>
        <entry valign="top">boolean</entry>
        <entry valign="top">true</entry>
        <entry valign="top">Whether the config item is enabled.
          Disabled items appear greyed out.</entry>
      </row>
      <row>
        <entry valign="top">help</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The tooltip text for the element in the
          configuration dialog.</entry>
      </row>
      <row>
        <entry valign="top">label</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The label text for the element in the
          configuration dialog.</entry>
      </row>
      <row>
        <entry valign="top">min</entry>
        <entry valign="top">float</entry>
        <entry valign="top">0.0</entry>
        <entry valign="top">The minimal value allowed.</entry>
      </row>
      <row>
        <entry valign="top">max</entry>
        <entry valign="top">float</entry>
        <entry valign="top">9999.0</entry>
        <entry valign="top">The maximal value allowed.</entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>



  <section><title>Examples</title>

    <programlisting><![CDATA[
<unit label="Width:" bind="Dsp.win.width" min="0.5" max="50.0"
      help="The width of the display."/>
    ]]></programlisting>

  </section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="prefs-tag-uri">
  <title>&lt;uri&gt;</title>

  <para>An URI setting. Its representation is a file selection widget.
    </para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/prefs-uri" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>


  <section><title>Attributes</title>

    <informaltable frame="topbot">
    <tgroup>

    <thead>
      <row>
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Default Value</entry>
        <entry>Description</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry valign="top">action</entry>
        <entry valign="top">string</entry>
        <entry valign="top">open</entry>
        <entry valign="top">The file selection action property. Must be one
          of "open" (default and fallback value), "save", "select_folder"
          or "create_folder".</entry>
      </row>
      <row>
        <entry valign="top">bind</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The name of the variable or property to which the
          configuration element is bound.</entry>
      </row>
      <row>
        <entry valign="top">callback</entry>
        <entry valign="top">function</entry>
        <entry valign="top"/>
        <entry valign="top">A callback function which is called every time
          the value changes. The callback takes the name of the bound
          property and the new value as arguments.</entry>
      </row>
      <row>
        <entry valign="top">enabled</entry>
        <entry valign="top">boolean</entry>
        <entry valign="top">true</entry>
        <entry valign="top">Whether the config item is enabled. Disabled items
          appear greyed out.</entry>
      </row>
      <row>
        <entry valign="top">help</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The tooltip text for the element in the
          configuration dialog.</entry>
      </row>
      <row>
        <entry valign="top">label</entry>
        <entry valign="top">string</entry>
        <entry valign="top"/>
        <entry valign="top">The label text for the element in the
          configuration dialog.</entry>
      </row>
    </tbody>

    </tgroup>
    </informaltable>

  </section>



  <section><title>Examples</title>

    <programlisting><![CDATA[
<uri label="Background Image:" bind="Dsp.win.bg_uri"/>
    ]]></programlisting>

  </section>

</section>

</chapter>
  <chapter xmlns:xi="http://www.w3.org/2001/XInclude" id="libdesklets">
  <title>libdesklets</title>

  <para>To be written...</para>

</chapter>
  <chapter xmlns:xi="http://www.w3.org/2001/XInclude" id="tutor">
  <title>Tutorials</title>

  <para>Tutorials help to get you started. This chapter contains several
    mini tutorials to guide your first steps in developing on the
    <application>gDesklets</application> platform.</para>

  <note>
    <para>We want <emphasis>your tutorial!</emphasis></para>
    <para>If you have written a tutorial for some area of
      <application>gDesklets</application>, please contact the gDesklets
      Team. Share your tutorial with other users, by having it put in here.
      </para>
    <para>We're looking forward to your contribution.</para>
  </note>

  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="tutor-xml">
  <title>XML Crash Course</title>

<para>by Martin Grimme</para>


<section><title>Introduction</title>

  <para>This tutorial shows you the basics of the eXtensible Markup Language
    <acronym>XML</acronym>, which is an essential part of
    <application>gDesklets</application>.</para>
     
</section>



<section><title>It's about Trees</title>
 
  <para>Think of an XML document as a tree of genealogy: there are ancestors,
    children, siblings, and so on. These individuals are known as
    <emphasis>nodes.</emphasis>
    Every XML document requires a root node, which is the ancestor of all
    other nodes.</para>
      
  <para>Nodes are represented by pointy braces between which you can find
    their name. This representation is called a <emphasis>tag.</emphasis>
    Here you can see some examples of tags:</para>
      
  <programlisting><![CDATA[
<Kronos>
<Zeus>
<Artemis>
<Leda>
  ]]></programlisting>
  
  <para>Their relationship is as follows: Kronos is the father of Zeus, who
    in turn is the father of Artemis and Leda, who are siblings.</para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/genealogy" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>

  <para>This genealogy with Kronos as the root node can be represented as
    follows:</para>

  <programlisting><![CDATA[
<Kronos>
  <Zeus>
    <Artemis/>
    <Leda/>
  </Zeus>
</Kronos>
  ]]></programlisting>
    
  <para>The indentation is only there to emphasize the hierarchical structure,
    it is not needed but strongly recommended to increase readability.</para>
    
  <para>Whenever a node has children, then it consists of an opening and a
    closing tag. The closing tag has to contain a slash (/) as its first
    character. The children are simply put between the opening and closing
    tags.</para>
      
  <para>For nodes without children, the opening and closing tags are merged
    into a single tag where the slash is the last character (immediately
    before the closing brace).</para>
      
  <para>That way you can describe hierarchical structures easily using plain
    text files. The information is well-structured and thus apt for being
    read by machines as well as by humans.</para>

</section>



<section><title>Attributes</title>
      
  <para>Tags may also have a number of attributes describing the node.
    Zeus, e.g. lives on the Olymp and may thus have an attribute
    <property>place</property> telling us about where he lives:</para>
      
  <programlisting><![CDATA[
<Kronos>
  <Zeus place="Olymp">
    <Artemis/>
    <Leda/>
  </Zeus>
</Kronos>
  ]]></programlisting>

</section>



<section><title>Help the Parser</title>

  <para>You should help the XML parser by putting the following before the
    root node as the first line in XML documents:</para>
    
  <programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
  ]]></programlisting>

  <para>This specifies that the following document complies with the 1.0
    version of the XML specification and that text is encoded in UTF-8 unicode,
    the standard of GNOME (please make sure that the text encoding really is
    UTF-8 then).</para>
    
</section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="tutor-hello">
  <title>"Hello World!" and More</title>

<para>by Martin Grimme</para>


<section><title>Introduction</title>

  <para>"Hello World!" is traditionally the first program which you write when
    learning a new language. The "Hello World!" for
    <application>gDesklets</application> is remarkably easy. Therefore, we will
    extend it a bit. This tutorial will let you take a peek into
    advanced things like configuration dialogs, action handlers, event objects,
    and inline scripting to give you a quick overview.</para>

</section>



<section><title>Ready, Set, Go!</title>

  <para>You don't need much for creating desklets. Just make sure that you have
    these things ready:</para>

  <itemizedlist>
    <listitem>the <application>gDesklets</application> platform</listitem>
    <listitem>this book</listitem>
    <listitem>your favorite text editor (the author recommends
      <application>gedit</application> for writing desklets)</listitem>
  </itemizedlist>

  <para>Now, open your text editor and let's start the show!</para>

</section>



<section><title>Hello World!</title>

  <para>The first "Hello World!" desklet will be easy. It will just open a
    window saying "Hello World!" to the user.</para>

  <para>Copy the following lines into your editor and save the file as
    <filename>hello.display</filename>.</para>

  <programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<display>

  <label value="Hello World!"/>

</display>
  ]]></programlisting>

  <para>Run and enjoy your first self-made desklet. Now, wasn't that easy?
    </para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/hello-plain" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>

  <para>It's a bit tiny, indeed. But we can change the font size to make the
    text more readable. How about a font which is three centimeters high?</para>

  <programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<display>

  <label value="Hello World!" font="Sans 3cm"/>

</display>
  ]]></programlisting>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/hello-big" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>

  <para>Much better! Why don't we change the label color as well?</para>

  <programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<display>

  <label value="Hello World!" font="Sans 3cm" color="red"/>

</display>
  ]]></programlisting>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/hello-color" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>

</section>



<section><title>Make it Configurable</title>

  <para>Not everybody likes red labels. It would be better to let the user
    change the color. This can be achieved with the preferences system.</para>

  <para>First, we have to give our label an ID, so that we can call it by its
    name later. This is done with the <property>id</property> property.
    The ID can be any alphanumeric string as long as its a unique ID within the
    <filename>.display</filename> file. Just call it
    "<literal>mylabel</literal>" for now.</para>

  <programlisting><![CDATA[
<label id="mylabel" value="Hello World!" font="Sans 3cm" color="red"/>
  ]]></programlisting>

  <para>Now that we have given a name to the label, we can bind its
    <property>color</property> (or any other property, too) to a preferences
    dialog.</para>

  <para>The preferences dialog is defined within the
    <command>&lt;prefs&gt;</command> tag. We need a color selector bound to the
    label:</para>

  <programlisting><![CDATA[
<color label="Text Color:" bind="Dsp.mylabel.color"/>
  ]]></programlisting>

  <para>As you can see, the color selector has a label text, with which it
    appears in the dialog. The interesting part is the
    <property>bind</property> property, however. With <property>bind</property>,
    you can bind any readable and writable object to a configuration element.
    In our "Hello World!" example, this is the <property>color</property>
    property of the label. To avoid namespace clutter, all display elements
    sit within the <literal>Dsp</literal> namespace. That's why we need the
    "<literal>Dsp.</literal>" prefix before "<literal>mylabel</literal>".</para>

  <para>Here is our working configurable "Hello World!" desklet:</para>

  <programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<display>

  <label id="mylabel" value="Hello World!" font="Sans 3cm" color="red"/>

  <prefs>

    <color label="Text Color:" bind="Dsp.mylabel.color"/>

  </prefs>

</display>
  ]]></programlisting>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/hello-prefs" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>

  <para>The label color is fully configurable now. Restart the desklet
    or <application>gDesklets</application> and you will see that the
    configuration has been saved across sessions. Making a desklet configurable
    couldn't be easier!</para>

  <para>For an excercise, you can try to make the label font and the text
    configurable as well. That way you can already get used to using this book
    as a reference book.</para>
</section>



<section><title>Adding Life</title>

  <para>Until now, our "Hello World!" was pretty static and boring.
    We are going to change this now. Let's use some scripting to make
    it alive.</para>

  <para>First of all, we add an image and let it appear behind the label. To
    make it appear behind the label, set it before it in the
    <filename>.display</filename> file. That way the label will be in front.
    </para>

  <programlisting><![CDATA[
<image uri="/usr/share/pixmaps/gdesklets.png"/>
<label id="mylabel" value="Hello World!" font="Sans 3cm" color="red"/>
  ]]></programlisting>

  <para>Every display element provides hooks, where you can put action handlers
    in. These hooks are properties as well, and accept Python scripts. To make
    the image react on entering with the mouse pointer, we have to setup the
    <property>on-enter</property> handler.</para>

  <programlisting><![CDATA[
<image uri="/usr/share/pixmaps/gdesklets.png" on-enter="print 'entering'"/>
  ]]></programlisting>

  <para>Instead of the simple <literal>print</literal> statement, we could
    also modify properties. For example, change the size of the image.</para>

  <para>Before you start adding an ID to the image as well, keep in mind that
    action handlers let you refer to the element where the action occurred using
    the <literal>self</literal> reference. Changing the image size on entering
    the image is thus as simple as this, without the need for an ID:</para>

  <programlisting><![CDATA[
<image uri="/usr/share/pixmaps/gdesklets.png" on-enter="self.scale = 2"/>
  ]]></programlisting>

  <para>The <property>on-leave</property> handler gets activated when the mouse
    leaves the element again. In that case, we want to reset the image to its
    original size again. Here's the full code so far:</para>

  <programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<display>

  <image uri="/usr/share/pixmaps/gdesklets.png"
         on-enter="self.scale = 2"
         on-leave="self.scale = 1"/>
  <label id="mylabel" value="Hello World!" font="Sans 3cm" color="red"/>

  <prefs>

    <color label="Text Color:" bind="Dsp.mylabel.color"/>

  </prefs>

</display>
  ]]></programlisting>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/hello-action" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>

</section>



<section><title>More Fancy Stuff</title>

  <para>The last challenge in our "Hello World!" tutorial will be to make the
    image draggable with the mouse pointer. Does this sound difficult?
    Don't worry, it's not complicated at all.</para>

  <para>At first, we have to be aware that there are two states now:</para>

  <itemizedlist>
    <listitem>State 1: the image is not being dragged</listitem>
    <listitem>State 2: the image is being dragged</listitem>
  </itemizedlist>

  <para>It is important to keep track of the current state. Initially we are
    in state 1. As soon as the user presses the mouse button,
    we enter state 2 and remain in that state until she releases the button
    again. Then we enter state 1 again. If we're in state 2, we have to watch
    the pointer movements and move the image to the current pointer position.
    </para>

  <para>To keep track of the state, we need some variable. This will inevitably
    lead us to inline scripting. Inline scripts are Python scripts which can
    directly interact with the display elements. Action handlers were your first
    encounter with inline scripts already. But you can also put scripts inside
    the <command>&lt;script&gt;</command> tag, like this:</para>

  <programlisting><![CDATA[
<script>

  # this is some inline script

  a = 1
  b = 2
  print a + b

  # we can also modify properties of display elements here
  Dsp.mylabel.value = "Hallo Welt!"

</script>
  ]]></programlisting>

  <para>Most times, scripts require us to use characters, which are reserved by
    XML, such as "&lt;", "&gt;", or "&amp;". They can be entered by using the
    common XML entities instead, e.g. "&amp;lt;", "&amp;gt;", or "&amp;amp;".
    While this is neccessary for action handler scripts, we can use
    <emphasis>CDATA</emphasis> sections in the
    <command>&lt;script&gt;</command> tag to avoid it. A CDATA section is a
    section which the XML parser doesn't parse. Therefore, there is no need
    for escaping reserved characters.</para>

  <para>Any text within "<literal>&lt;![CDATA[</literal>" and
    <literal>"]]&gt;</literal>" is ignored by the XML parser. It is always safe
    to enclose inline scripts in a CDATA section, like this:</para>

  <programlisting><![CDATA[
<script><![CDATA[

  ...

]]>]]&gt;<![CDATA[</script>
  ]]></programlisting>

  <para>Back to our problem. The current state can be remembered by using a
    script variable:</para>

  <programlisting><![CDATA[
<script><![CDATA[

  # the initial state
  state = 1

]]>]]&gt;<![CDATA[</script>
  ]]></programlisting>

  <para>The <property>on-press</property> handler is responsible for
    taking actions when the user presses the mouse button.
    The <property>on-release</property> handler is called on releasing
    the button. Therefore, we use these two action handlers for setting the
    current state:</para>

  <programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<display on-press="state = 2"
         on-release="state = 1">

  <image uri="/usr/share/pixmaps/gdesklets.png"
         on-enter="self.scale = 2"
         on-leave="self.scale = 1"/>
  <label id="mylabel" value="Hello World!" font="Sans 3cm" color="red"/>

  <prefs>

    <color label="Text Color:" bind="Dsp.mylabel.color"/>

  </prefs>


  <script><![CDATA[

    # the initial state
    state = 1

  ]]>]]&gt;<![CDATA[</script>

</display>
  ]]></programlisting>

  <para>The last action handler needed for this tutorial is the
    <property>on-motion</property> handler. It gets called whenever the mouse
    is being moved. Since we want to capture motion events on the whole display,
    we put this handler into the <command>&lt;display&gt;</command> tag.</para>

  <para>We're going to call a <literal>move()</literal> function in the
    action handler. This function, of course, should only be used if we're
    currently in state 2:</para>

  <programlisting><![CDATA[
<display on-press="state = 2"
         on-release="state = 1"
         on-motion="if (state == 2): move(self.event.x, self.event.y)">
  ]]></programlisting>

  <para>The <literal>self.event</literal> object is an event object of the
    action handler. Every action handler provides an event object with
    information about the action. In this example the current position of the
    mouse pointer can read from the <property>x</property> and
    <property>y</property> properties. Please note that the event object is
    only available within the action handler.</para>

  <para>For the last part, the <literal>move()</literal> function has to be
    implemented. This function takes the current pointer position and modifies
    the <property>x</property> and <property>y</property> properties of the
    image in order to move it.
    This time, we really need to give the image an ID.</para>

  <para>The complete code now looks like this:</para>

  <programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<display on-press="state = 2"
         on-release="state = 1"
         on-motion="if (state == 2): move(self.event.x, self.event.y)">

  <image id="img" uri="/usr/share/pixmaps/gdesklets.png"
         on-enter="self.scale = 2"
         on-leave="self.scale = 1"/>
  <label id="mylabel" value="Hello World!" font="Sans 3cm" color="red"/>

  <prefs>

    <color label="Text Color:" bind="Dsp.mylabel.color"/>

  </prefs>


  <script><![CDATA[

    # the initial state
    state = 1

    def move(x, y):

        Dsp.img.x = x
        Dsp.img.y = y

  ]]>]]&gt;<![CDATA[</script>

</display>
  ]]></programlisting>

  <para>Now that you've finished this tutorial, you should have got a good
    overview of most concept of the <application>gDesklets</application>
    platform. However, this tutorial covered many, but not all parts of the
    platform. There's still lots to be explored!</para>

</section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="tutor-canvas">
  <title>The Canvas</title>

<para>by Martin Grimme (<application>gDesklets</application> SVG logo is a
  courtesy of Johannes Rebhan)</para>


<section><title>Introduction</title>

  <para>The <command>&lt;canvas&gt;</command> element provides a canvas for
    drawing scalable vector graphics onto. These drawings can even be animated.
    </para>

  <para>This tutorial shows you how you can make full use of the
    <link linkend="dsp-tag-canvas"><command>&lt;canvas&gt;</command></link>
    element and SVG scripting.</para>

</section>


<section><title>SVG</title>

  <para><acronym>SVG</acronym> stands for Scalable Vector Graphics. It is a
    standardized graphics format based on XML.
    <application>gDesklets</application> can read SVG and animate images by
    modifying properties in the XML tree of the SVG.</para>

  <para>Good tools for creating SVG drawings on Unix systems are
    <application>Sodipodi</application> and its amazing fork
    <application>Inkscape</application>. Of course, since SVG is clean XML,
    you can also create drawings with a simple text editor.</para>

</section>


<section><title>Loading Drawings</title>

  <para>The easiest to way to render drawings is loading them from file.
    The <command>&lt;canvas&gt;</command> can read SVG drawings, so you can
    make an image with your favorite SVG drawing tool and load it into
    your applet.</para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/canvas-tool" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>

  <para>The SVG file can be loaded into the canvas with the
    <property>uri</property> property. Use the <property>width</property>
    and <property>height</property> properties to scale the image.</para>

  <programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<display>

  <canvas id="mycanvas" uri="gdesklets.svg" width="200" height="200"/>

</display>
  ]]></programlisting>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/canvas-load" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>

</section>



<section><title>Manipulating the DOM</title>

  <para>A SVG image is composed of elements. These elements in turn could even
    be decomposed into more elements, perhaps. Here you can see a halfway
    decomposed <application>gDesklets</application> logo:</para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/canvas-decompose" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>

  <para>Every piece or composition of pieces can have an ID by which it can
    be identified and addressed. By manipulating the properties of such an
    element, scripts can animate the image.</para>

  <para>The composition tree of SVG elements is represented by a
    <emphasis>Document Object Model</emphasis>, a DOM. The DOM is a tree of
    nodes where each node represents a node in the SVG tree of elements.
    Element properties can be directly manipulated on the DOM.</para>

  <para>The <command>&lt;canvas&gt;</command> display element provides a
    mini-DOM for this purpose through its <property>dom</property> property.
    </para>

  <para>You can use your SVG editor for finding the ID of the elements which
    you want to manipulate. If you have the ID, you can use the
    <function>get()</function> method to retrieve the corresponding node and
    directly modify its properties.</para>

  <para>After having finished manipulating the DOM, you can have the image
    redraw itself by calling the <function>update()</function> method on the
    DOM.</para>

  <programlisting><![CDATA[
<script>

  dom = Dsp.mycanvas.dom
  node = dom.get("rect588")
  node["style"] = "fill:yellow"
  dom.update()

</script>
  ]]></programlisting>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/canvas-yellow" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>

  <para>Of course, we can use this in action handlers, too (remember to call
    the <function>update()</function> method):</para>

  <programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<display>

  <canvas uri="gdesklets.svg" width="200" height="200"
    on-enter="self.dom.get('rect588')['style'] = 'fill:yellow'; self.dom.update()"
    on-leave="self.dom.get('rect588')['style'] = 'fill:blue'; self.dom.update()"/>

</display>
  ]]></programlisting>

</section>



<section><title>Generating Drawings on the Fly</title>

  <para>Instead of loading SVG files, you can also feed the canvas directly
    with a string of SVG data. The <property>graphics</property> property
    accepts SVG code.</para>

  <para>SVG usually requires the <property>width</property> and
    <property>height</property> properties specified in the
    <command>&lt;svg&gt;</command> root tag.
    <application>gDesklets</application>, however, automatically sets these
    to <literal>100 x 100</literal> if you omit them.</para>

  <programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<display window-flags="above">

  <canvas id="mycanvas" width="200" height="200"/>

  <script><![CDATA[

    svg = """
      <svg>

        <rect x="0" y="0" width="100" height="100"
              style="fill:white; stroke:black; fill-opacity:50%"/>

        <circle cx="50" cy="50" r="20" style="stroke:black; fill:yellow"/>

      </svg>
    """

    Dsp.mycanvas.graphics = svg
  ]]>]]&gt;<![CDATA[</script>

</display>
  ]]></programlisting>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/canvas-inline" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>

</section>



<section><title>Animate It</title>

  <para>Of course, the DOM is also available for images set by the
    <property>graphics</property> property. For the end of this tutorial, we are
    going to let the ball on the image bounce.</para>

  <para>First of all, the ball needs an ID, so that we can easily access it
    through the DOM:</para>

  <programlisting><![CDATA[
<circle id="ball" cx="50" cy="50" r="20" style="stroke:black; fill:yellow"/>
  ]]></programlisting>

  <para>The animation can be done in a timer. We simply change the
    <property>x</property> and <property>y</property> properties regularly to
    make it move. Special treatment is needed for edges since the ball has to
    bounce back there. This can be achieved by just inverting the current
    movement direction.</para>

  <programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<display window-flags="above">

  <canvas id="mycanvas" width="200" height="200"/>

  <script><![CDATA[

    svg = """
      <svg>

        <rect x="0" y="0" width="100" height="100"
              style="fill:white; stroke:black; fill-opacity:50%"/>

        <circle id="ball" cx="50" cy="50" r="20" style="stroke:black; fill:yellow"/>

      </svg>
    """

    Dsp.mycanvas.graphics = svg

    dx = 3
    dy = 2

    def bounce():
        global dx, dy

        ball = Dsp.mycanvas.dom.get("ball")
        x = int(ball["cx"])
        y = int(ball["cy"])

        # bounce back at the edges
        if (x <= 20 or x >= 80): dx = -dx
        if (y <= 20 or y >= 80): dy = -dy

        # move the ball
        x += dx
        y += dy
        ball["cx"] = str(x)
        ball["cy"] = str(y)

        # redraw image
        Dsp.mycanvas.dom.update()
        
        # keep the animation running
        return True

   
    # animate every 100 milliseconds    
    add_timer(100, bounce)

  ]]>]]&gt;<![CDATA[</script>

</display>
  ]]></programlisting>

  <para>Please note that all properties of SVG elements are strings and have to
    be strings. That's why we need the conversions in the timer.</para>

</section>

</section>
  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="tutor-controls">
  <title>Using Controls</title>

<para>by Martin Grimme</para>


<section><title>Introduction</title>

  <para>Controls let your inline scripts access any kind of data. They are
    easy-to-use sharable modules which provide you with more power. In this
    tutorial we are going to make a digital clock with timezone support
    which uses a time control for telling the time.</para>
     
</section>



<section><title>Browsing Controls</title>

  <para>Before you can use a control (unless you write it yourself), you have to
    find it. The <application>gdesklets-shell</application> lets you browse all
    the controls which are installed on your system.</para>

  <para>Select the <literal>Controls</literal> view to enter the controls
    browser. There you can, for example, choose the alphabetical list for
    searching for a certain control.</para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/controls-browse" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>

  <para>For this tutorial, we're interested in a control for reading the
    current time. So we look under "<literal>T</literal>" for "Time".</para>

</section>



<section><title>Inspecting Controls</title>

  <para>Now that you have found the control, you can learn more about it by
    inspecting its properties. To open the controls inspector, just double
    click on the control in the list on the right side of the window.</para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/controls-inspect" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>

  <para>The controls inspector lists all available properties of the control
    together with their access permissions and a short description. Each control
    has a set of properties with which it can be configured and from which you
    can read information.</para>

  <para>Our time control, for example, provides a <property>time</property>
    property for reading the current time. There are other properties available
    as well, but for now, we're just interested in that
    <property>time</property> property.</para>

  <para>The "<literal>r</literal>" permission shown for the
    <property>time</property> property means that this property can only be
    read. It cannot be written. This makes sense, because you can only read
    the time, but not change it.</para>

</section>



<section><title>Loading Controls</title>

  <para>Before you can use a control, you have to load it first. If you took
    a closer look at the control browser, you could see that every control
    implements one or more interfaces, which define the set of available
    properties. So two different controls implementing the same interfaces
    would be perfectly interchangable.</para>

  <para>Every interface has a unique identifier by which you can load controls.
    The identifier is displayed by the controls inspector and can be copied and
    pasted from there into your text editor.</para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/controls-id" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>

  <para>To load a control in your <filename>.display</filename> you specify
    this ID in the <command>&lt;control&gt;</command> tag. This tag has a
    property <property>interface</property> for the interface ID.
    A compatible control is then looked up by searching for that interface.
    The other property <property>id</property> specifies the identifier by
    which you can access that control in the scripts.</para>

  <programlisting><![CDATA[
<display window-flags="sticky, below">

  <control id="mytime" interface="ITime:9y703dqtfnv4w373caserz68r"/>

</display>
  ]]></programlisting>

  <para>To avoid any mistakes, just copy and paste the interface ID from the
    controls inspector.</para>

  <para>Of course, there is no limitation in the number of controls used in
    a <filename>.display</filename> file. You can have as many
    <command>&lt;control&gt;</command> tags as you like.</para>

</section>



<section><title>Accessing the Control</title>

  <para>The loaded control is an object with properties, which you can access
    in the scripts.</para>

  <programlisting><![CDATA[
<script>

  print "The current time is:"
  print mytime.time

</script>
  ]]></programlisting>

  <para>The <property>time</property> property of our time control returns the
    current time as a triple of integers for hours, minutes, and seconds.</para>

  <programlisting><![CDATA[
<script>

  h, m, s = mytime.time
  print "The current time is:"
  print "%2d:%2d.%2d" % (h, m, s)

</script>
  ]]></programlisting>

  <para>Instead of printing out the values, we can also write them into a
    label.</para>

  <programlisting><![CDATA[
<display window-flags="sticky, below">

  <control id="mytime" interface="ITime:9y703dqtfnv4w373caserz68r"/>

  <label id="mylabel" font="Mono 1cm" color="red"/>

  <script><![CDATA[

    h, m, s = mytime.time
    Dsp.mylabel.value = "%2d:%2d.%2d" % (h, m, s)

  ]]>]]&gt;<![CDATA[</script>

</display>
  ]]></programlisting>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/controls-time" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>

  <para>Congratulations to your first controls-based applet!</para>

</section>



<section><title>Making the Clock Run</title>

  <para>We have a clock applet so far, but still, the clock doesn't update its
    time. Such a clock would show the correct time once a day, but we can make
    it better.</para>

  <para>The <property>time</property> property always contains the current time,
    so we could continually poll the time from there by setting up a timer.
    </para>

  <programlisting>
def timer():

    h, m, s = mytime.time
    Dsp.mylabel.value = "%2d:%2d.%2d" % (h, m, s)
    return True

# call the timer every 1000ms = 1s
add_timer(1000, timer)
  </programlisting>

  <para>While this would work, it's not really good programming. Instead of
    continually reading the property, we can watch it and receive notifications
    only when it actually changes.</para>

  <para>A property can be watched by binding a watching handler to it. Not all
    properties support this, however, because it doesn't make sense always.
    Our <property>time</property> property supports watching, so that we can
    bind a handler to the property via the
    <function>bind(name, handler)</function> method of the control.</para>

  <programlisting>
def myhandler(new_value):

    h, m, s = new_value
    Dsp.mylabel.value = "%2d:%2d.%2d" % (h, m, s)

mytime.bind("time", myhandler)
  </programlisting>

  <para>In the example above, we are binding the function
    <function>myhandler</function> to the <property>time</property> of the
    control. Whenever the <property>time</property> property changes its value
    (once a second, of course), our handler will be invoked with the new
    value as its argument.</para>

  <programlisting><![CDATA[
<display window-flags="sticky, below">

  <control id="mytime" interface="ITime:9y703dqtfnv4w373caserz68r"/>

  <label id="mylabel" font="Mono 1cm" color="red"/>

  <script><![CDATA[

    def myhandler(new_value):
    
        h, m, s = new_value
        Dsp.mylabel.value = "%2d:%2d.%2d" % (h, m, s)

    mytime.bind("time", myhandler)

  ]]>]]&gt;<![CDATA[</script>

</display>
  ]]></programlisting>

  <para>Run this example and you will see that the clock now updates its time
    correctly.</para>

  <para>The <function>bind</function> method is available for every control.
    Properties which don't support watching won't call the watching handler,
    though.</para>

</section>



<section><title>Saving Configuration across Sessions</title>

  <para>Controls can be configured by setting their property values. Our time
    control, for example, can be set to a different time zone by setting its
    <property>timezone</property> property.</para>

  <programlisting><![CDATA[
mytime.timezone = "Asia/Tokyo"
  ]]></programlisting>

  <para>By using the preferences system, you can make this property
    user-configurable and save its value across sessions.
    The <property>timezone</property> property contains a string. Thus we can
    bind it to a <command>&lt;string&gt;</command> setting in the preferences
    dialog.</para>

  <programlisting><![CDATA[
<display window-flags="sticky, below">

  <control id="mytime" interface="ITime:9y703dqtfnv4w373caserz68r"/>

  <label id="mylabel" font="Mono 1cm" color="red"/>


  <prefs>

    <string label="Timezone:" bind="mytime.timezone"/>

  </prefs>


  <script><![CDATA[

    def myhandler(new_value):
    
        h, m, s = new_value
        Dsp.mylabel.value = "%2d:%2d.%2d" % (h, m, s)

    mytime.bind("time", myhandler)

  ]]>]]&gt;<![CDATA[</script>

</display>
  ]]></programlisting>
 
</section>


</section>

  <section xmlns:xi="http://www.w3.org/2001/XInclude" id="tutor-tutor">
  <title>Tutorial Meta-Tutorial</title>

<para>by Martin Grimme</para>


<section><title>Introduction</title>

  <para>You can contribute to the tutorials chapter by writing new tutorials.
    This meta-tutorial shows you how to write compliant tutorials for this
    book.</para>
     
</section>



<section><title>DocBook</title>

  <para>DocBook is a widely used standard for writing documentation. It is a
    semantic markup language based on SGML. Recently, DocBook has been ported
    to XSLT stylesheets, so that any XSLT processor can process DocBook sources.
    The XSLT stylesheets we are using for generating HTML pages are those of
    the <application>yelp</application> project, because they are fast and
    produce good output.</para>

  <para>It's not the purpose of this tutorial to teach you DocBook. There are
    plenty of other tutorials available, which do a much better job at that.
    Here is a collection of resources to get you started with DocBook:</para>

  <itemizedlist>
    <listitem><ulink url="http://www.docbook.org"/> - The home of DocBook. You
      can find lots of information and documentation there.</listitem>
    <listitem><ulink url="http://docbook.sourceforge.net"/> - The DocBook Open
      Repository is the official home of the DocBook stylesheets.</listitem>
    <listitem><ulink url="http://www.docbook.org/tdg/en/html/docbook.html"/> -
      DocBook: The Definitive Guide. The name says it all. This is the online
      version of the most comprehensive DocBook book out there by
      Norman Walsh and Leonard Muellner.</listitem>
    <listitem><ulink url="http://developer.gnome.org/projects/gdp/handbook/gdp-handbook/index.html"/> -
      GNOME Handbook of Writing Software Documentation. This online book is a
      good source of information for writing software documentation with
      DocBook.</listitem>
    <listitem><ulink url="http://www.bartleby.com/141/"/> - The Elements of
      Style. This book is about good writing style.</listitem>
  </itemizedlist>

</section>



<section><title>Template</title>

  <para>To make stuff look uniform, please use the provided template for
    writing tutorials. You can copy and paste it into a new file from below:
    </para>

  <literallayout>&lt;section id="tutor-TEMPLATE"  xmlns:xi="http://www.w3.org/2001/XInclude"&gt;
  &lt;title&gt;Title of the Tutorial&lt;/title&gt;

&lt;para&gt;by Your Name&lt;/para&gt;


&lt;section&gt;&lt;title&gt;Introduction&lt;/title&gt;

  &lt;para&gt;Some introductory text about what the reader will find in the tutorial.
    &lt;/para&gt;
     
&lt;/section&gt;



&lt;section&gt;&lt;title&gt;Section 1&lt;/title&gt;

  &lt;para&gt;blah blah blah...&lt;/para&gt;

&lt;/section&gt;



&lt;section&gt;&lt;title&gt;Another Section&lt;/title&gt;

  &lt;para&gt;Some more blah blah blah...&lt;/para&gt;

&lt;/section&gt;


&lt;/section&gt;
</literallayout>

  <para>The filename must start with "<filename>tutor-</filename>" and have the
    extension "<filename>.xml</filename>". After the hyphen, you include the
    (abbreviated) name of your tutorial. This name must be unique within the
    whole book. The same name with the "<literal>tutor-</literal>" prefix goes
    into the <property>id</property> attribute in the <command>section</command>
    tag in the first line of the document.</para>

</section>



<section><title>Screenshots</title>

  <para>A picture is worth a thousand words. Screenshots (and diagrams) help you
    illustrate what you're talking about. Please make good use of them because
    the reader will appreciate it.</para>

  <para>Screenshots can be included in DocBook like this:</para>

  <programlisting><![CDATA[
<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="gfx/my-image" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
  ]]></programlisting>

  <para>Please note that the filename does not get the suffix here. The file
    itself has the <filename>.png</filename> suffix, of course. The included
    files have to be in the PNG format (GIF used to be non-free and is now
    deprecated, and JPEG isn't free either).</para>

  <para>The filename of the screenshot must be unique within the book, too.
    It is recommended to start all filenames with the (abbreviated) name of
    your tutorial.</para>

</section>



<section><title>Showing XML</title>

  <para>In a tutorial for <application>gDesklets</application>, it's often
    necessary to show example code which is XML. Example code can be
    displayed with the <command>&lt;programlisting&gt;</command> tag:</para>

  <programlisting><![CDATA[
<programlisting>

  ...

</programlisting>
  ]]></programlisting>

  <para>A problem, however, is that the XML code of course uses characters
    which are reserved by XML, such as "&lt;" and "&gt;". You can get around
    this limitation by putting the example into a CDATA section:</para>

  <programlisting><![CDATA[
<programlisting><![CDATA[

  ...

]]>]]&gt;<![CDATA[</programlisting>
  ]]></programlisting>

  <para>There remains only one problem: CDATA sections cannot be nested. So,
    what if your example contains CDATA sections as well?</para>

  <para>The solution is to split the CDATA section into two CDATA sections
    at the point where the CDATA section in the example code ends:</para>

  <programlisting><![CDATA[
<programlisting><![CDATA[

  <![CDATA[ ... ]]>]]&gt;<![CDATA[

]]>]]&gt;<![CDATA[</programlisting>
  ]]></programlisting>

  <para>must be written as</para>

  <programlisting><![CDATA[
<programlisting><![CDATA[

  ...
  <![CDATA[ ... ]]>]]&gt;]]&amp;gt;&lt;![CDATA[<![CDATA[
  
]]>]]&gt;<![CDATA[</programlisting>
  ]]></programlisting>

  <para>This might look confusing at first, but the simple rule is that every
    occurrence of "<literal>]]&gt;</literal>" has just to be extended with
    "<literal>]]&amp;gt;&lt;![CDATA[</literal>".</para>

</section>



<section><title>Previewing Your Work</title>

  <para>To preview the new tutorial file, you have to embed it into a valid
    DocBook file. The tutorial file is just a section and not a complete
    DocBook file.</para>

  <para>The easiest way to embed it into a DocBook file is by getting the
    DocBook sources of this book from CVS and include your file in the
    tutorials chapter.</para>

  <para>You can retrieve the DocBook sources like this:</para>

  <screen>
    <prompt>$&gt; </prompt><userinput>export CVSROOT=:pserver:anonymous@anoncvs.gnome.org/cvs/gnome</userinput>
    <prompt>$&gt; </prompt><userinput>cvs login</userinput>
    (press <keycap>Enter</keycap> when asked for a password)
    <prompt>$&gt; </prompt><userinput>cvs co gdesklets/doc/book</userinput>
  </screen>

  <para>Then you can include your tutorial in the file
    <filename>tutor.xml</filename> using XInclude like this:</para>

  <programlisting><![CDATA[
...

  <xi:include href="tutor-xml.xml"/>
  <xi:include href="tutor-hello.xml"/>
  <xi:include href="tutor-canvas.xml"/>
  ...
  <xi:include href="tutor-mytutorial.xml"/>

...
  ]]></programlisting>

  <para>The book can be previewed with the <application>yelp</application> tool
    of the <application>GNOME</application> desktop:</para>

  <screen>
    <prompt>$&gt; </prompt><userinput>yelp ghelp://$PWD/book.xml</userinput>
  </screen>

  <para>The script <filename>make-html.sh</filename> can be called to convert
    the DocBook files to HTML using the <application>yelp</application>
    stylesheets (<application>yelp</application> must be installed):</para>

  <screen>
    <prompt>$&gt; </prompt><userinput>./make-html.sh book.xml output</userinput>
  </screen>

  <para>The book can then be found in <filename>output/index.html</filename>.
    </para>
</section>

</section>

</chapter>


  <!-- appendices -->
  <appendix xmlns:xi="http://www.w3.org/2001/XInclude" id="apdx-datatypes">
  <title>Datatypes in gDesklets</title>

  <informaltable frame="topbot">
  <tgroup>

  <thead>
    <row>
      <entry>Datatype</entry>
      <entry>Description</entry>
    </row>
  </thead>

  <tbody>
    <row>
      <entry valign="top">boolean</entry>
      <entry valign="top">Either <literal>true</literal> or
        <literal>false</literal>.</entry>
    </row>
  </tbody>

  <tbody>
    <row>
      <entry valign="top">color</entry>
      <entry valign="top">Can either be a textual name such as "red", or
        a hexadecimal value initiated by a hash sign (#), consisting of red,
        green, blue, and alpha values. Each value is 8 bit (between
        <literal>00</literal> and <literal>FF</literal>. The alpha byte is
        optional and not supported always.</entry>
    </row>
  </tbody>

  <tbody>
    <row>
      <entry valign="top">direction</entry>
      <entry valign="top">One of the strings <literal>nw, n, ne, e, se, s,
        sw, w, center</literal>. The strings represent the directions
        north-west, north, north-east, east, south-east, south, south-west,
        west, center, respectively.</entry>
    </row>
  </tbody>

  <tbody>
    <row>
      <entry valign="top">float</entry>
      <entry valign="top">A floating point value.</entry>
    </row>
  </tbody>

  <tbody>
    <row>
      <entry valign="top">font</entry>
      <entry valign="top">A font string consists of the font family,
        some styles (like <literal>bold</literal> or
        <literal>italic</literal>), and a size value, which is a valid
        <link linkend="apdx-datatypes-unit">unit</link> value.</entry>
    </row>
  </tbody>

  <tbody>
    <row>
      <entry valign="top">integer</entry>
      <entry valign="top">An integer value.</entry>
    </row>
  </tbody>

  <tbody>
    <row>
      <entry valign="top">object</entry>
      <entry valign="top">An object with which you can interact with.</entry>
    </row>
  </tbody>

  <tbody>
    <row>
      <entry valign="top">script</entry>
      <entry valign="top">A string of Python script.</entry>
    </row>
  </tbody>

  <tbody>
    <row>
      <entry valign="top">string</entry>
      <entry valign="top">A string of characters enclosed in single (') or
        double quotes (").</entry>
    </row>
  </tbody>

  <tbody>
    <row id="apdx-datatypes-unit">
      <entry valign="top">unit</entry>
      <entry valign="top">A size or coordinate value with a measurement unit.
        The measurement units can be <literal>cm, in, pt, %</literal> for
        centimeters, inches, DTP points, or percentage values, respectively.
        If no unit is given, pixels are used.</entry>
    </row>
  </tbody>

  <tbody>
    <row>
      <entry valign="top">URI</entry>
      <entry valign="top">A Uniform Resource Identifier. This can be a
        valid URL, a local file path, or a valid VFS path.</entry>
    </row>
  </tbody>

  </tgroup>
  </informaltable>

</appendix>
  <appendix xmlns:xi="http://www.w3.org/2001/XInclude" id="apdx-cursors">
  <title>Cursors <emphasis>[New in 0.35]</emphasis></title>

  <para>The appearance of the cursors depends on the desktop cursor theme which
    the user has selected. Thus you should not choose cursors by their image but
    by their semantic content.</para>

  <informaltable frame="topbot">
  <tgroup>

  <tbody>
    <row>
      <entry valign="top">
        <screenshot><mediaobject><imageobject>
          <imagedata fileref="gfx/cursor_crosshair" format="PNG"/>
        </imageobject></mediaobject></screenshot>
      </entry>
      <entry valign="top">CROSSHAIR</entry>
    </row>
    <row>
      <entry valign="top">
        <screenshot><mediaobject><imageobject>
          <imagedata fileref="gfx/cursor_pointer_1" format="PNG"/>
        </imageobject></mediaobject></screenshot>
      </entry>
      <entry valign="top">POINTER_1</entry>
    </row>
    <row>
      <entry valign="top">
        <screenshot><mediaobject><imageobject>
          <imagedata fileref="gfx/cursor_pointer_2" format="PNG"/>
        </imageobject></mediaobject></screenshot>
      </entry>
      <entry valign="top">POINTER_2</entry>
    </row>
    <row>
      <entry valign="top">
        <screenshot><mediaobject><imageobject>
          <imagedata fileref="gfx/cursor_fleur" format="PNG"/>
        </imageobject></mediaobject></screenshot>
      </entry>
      <entry valign="top">FLEUR</entry>
    </row>
    <row>
      <entry valign="top">
        <screenshot><mediaobject><imageobject>
          <imagedata fileref="gfx/cursor_link" format="PNG"/>
        </imageobject></mediaobject></screenshot>
      </entry>
      <entry valign="top">LINK</entry>
    </row>
    <row>
      <entry valign="top">
        <screenshot><mediaobject><imageobject>
          <imagedata fileref="gfx/cursor_question" format="PNG"/>
        </imageobject></mediaobject></screenshot>
      </entry>
      <entry valign="top">QUESTION</entry>
    </row>
    <row>
      <entry valign="top">
        <screenshot><mediaobject><imageobject>
          <imagedata fileref="gfx/cursor_text" format="PNG"/>
        </imageobject></mediaobject></screenshot>
      </entry>
      <entry valign="top">TEXT</entry>
    </row>
    <row>
      <entry valign="top">
        <screenshot><mediaobject><imageobject>
          <imagedata fileref="gfx/cursor_wait" format="PNG"/>
        </imageobject></mediaobject></screenshot>
      </entry>
      <entry valign="top">WAIT</entry>
    </row>
    <row>
      <entry valign="top">
        <screenshot><mediaobject><imageobject>
          <imagedata fileref="gfx/cursor_x" format="PNG"/>
        </imageobject></mediaobject></screenshot>
      </entry>
      <entry valign="top">X</entry>
    </row>
  </tbody>

  </tgroup>
  </informaltable>

</appendix>

</book>
