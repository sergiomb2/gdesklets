<section id="tutor-canvas"  xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>The Canvas</title>

<para>by Martin Grimme (<application>gDesklets</application> SVG logo is a
  courtesy of Johannes Rebhan)</para>


<section><title>Introduction</title>

  <para>The <command>&lt;canvas&gt;</command> element provides a canvas for
    drawing scalable vector graphics onto. These drawings can even be animated.
    </para>

  <para>This tutorial shows you how you can make full use of the
    <link linkend="dsp-tag-canvas"><command>&lt;canvas&gt;</command></link>
    element and SVG scripting.</para>

</section>


<section><title>SVG</title>

  <para><acronym>SVG</acronym> stands for Scalable Vector Graphics. It is a
    standardized graphics format based on XML.
    <application>gDesklets</application> can read SVG and animate images by
    modifying properties in the XML tree of the SVG.</para>

  <para>Good tools for creating SVG drawings on Unix systems are
    <application>Sodipodi</application> and its amazing fork
    <application>Inkscape</application>. Of course, since SVG is clean XML,
    you can also create drawings with a simple text editor.</para>

</section>


<section><title>Loading Drawings</title>

  <para>The easiest to way to render drawings is loading them from file.
    The <command>&lt;canvas&gt;</command> can read SVG drawings, so you can
    make an image with your favorite SVG drawing tool and load it into
    your applet.</para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/canvas-tool" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>

  <para>The SVG file can be loaded into the canvas with the
    <property>uri</property> property. Use the <property>width</property>
    and <property>height</property> properties to scale the image.</para>

  <programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<display>

  <canvas id="mycanvas" uri="gdesklets.svg" width="200" height="200"/>

</display>
  ]]></programlisting>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/canvas-load" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>

</section>



<section><title>Manipulating the DOM</title>

  <para>A SVG image is composed of elements. These elements in turn could even
    be decomposed into more elements, perhaps. Here you can see a halfway
    decomposed <application>gDesklets</application> logo:</para>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/canvas-decompose" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>

  <para>Every piece or composition of pieces can have an ID by which it can
    be identified and addressed. By manipulating the properties of such an
    element, scripts can animate the image.</para>

  <para>The composition tree of SVG elements is represented by a
    <emphasis>Document Object Model</emphasis>, a DOM. The DOM is a tree of
    nodes where each node represents a node in the SVG tree of elements.
    Element properties can be directly manipulated on the DOM.</para>

  <para>The <command>&lt;canvas&gt;</command> display element provides a
    mini-DOM for this purpose through its <property>dom</property> property.
    </para>

  <para>You can use your SVG editor for finding the ID of the elements which
    you want to manipulate. If you have the ID, you can use the
    <function>get()</function> method to retrieve the corresponding node and
    directly modify its properties.</para>

  <para>After having finished manipulating the DOM, you can have the image
    redraw itself by calling the <function>update()</function> method on the
    DOM.</para>

  <programlisting><![CDATA[
<script>

  dom = Dsp.mycanvas.dom
  node = dom.get("rect588")
  node["style"] = "fill:yellow"
  dom.update()

</script>
  ]]></programlisting>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/canvas-yellow" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>

  <para>Of course, we can use this in action handlers, too (remember to call
    the <function>update()</function> method):</para>

  <programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<display>

  <canvas uri="gdesklets.svg" width="200" height="200"
    on-enter="self.dom.get('rect588')['style'] = 'fill:yellow'; self.dom.update()"
    on-leave="self.dom.get('rect588')['style'] = 'fill:blue'; self.dom.update()"/>

</display>
  ]]></programlisting>

</section>



<section><title>Generating Drawings on the Fly</title>

  <para>Instead of loading SVG files, you can also feed the canvas directly
    with a string of SVG data. The <property>graphics</property> property
    accepts SVG code.</para>

  <para>SVG usually requires the <property>width</property> and
    <property>height</property> properties specified in the
    <command>&lt;svg&gt;</command> root tag.
    <application>gDesklets</application>, however, automatically sets these
    to <literal>100 x 100</literal> if you omit them.</para>

  <programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<display window-flags="above">

  <canvas id="mycanvas" width="200" height="200"/>

  <script><![CDATA[

    svg = """
      <svg>

        <rect x="0" y="0" width="100" height="100"
              style="fill:white; stroke:black; fill-opacity:50%"/>

        <circle cx="50" cy="50" r="20" style="stroke:black; fill:yellow"/>

      </svg>
    """

    Dsp.mycanvas.graphics = svg
  ]]>]]&gt;<![CDATA[</script>

</display>
  ]]></programlisting>

  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="gfx/canvas-inline" format="PNG"/>
      </imageobject>
    </mediaobject>
  </screenshot>

</section>



<section><title>Animate It</title>

  <para>Of course, the DOM is also available for images set by the
    <property>graphics</property> property. For the end of this tutorial, we are
    going to let the ball on the image bounce.</para>

  <para>First of all, the ball needs an ID, so that we can easily access it
    through the DOM:</para>

  <programlisting><![CDATA[
<circle id="ball" cx="50" cy="50" r="20" style="stroke:black; fill:yellow"/>
  ]]></programlisting>

  <para>The animation can be done in a timer. We simply change the
    <property>x</property> and <property>y</property> properties regularly to
    make it move. Special treatment is needed for edges since the ball has to
    bounce back there. This can be achieved by just inverting the current
    movement direction.</para>

  <programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<display window-flags="above">

  <canvas id="mycanvas" width="200" height="200"/>

  <script><![CDATA[

    svg = """
      <svg>

        <rect x="0" y="0" width="100" height="100"
              style="fill:white; stroke:black; fill-opacity:50%"/>

        <circle id="ball" cx="50" cy="50" r="20" style="stroke:black; fill:yellow"/>

      </svg>
    """

    Dsp.mycanvas.graphics = svg

    dx = 3
    dy = 2

    def bounce():
        global dx, dy

        ball = Dsp.mycanvas.dom.get("ball")
        x = int(ball["cx"])
        y = int(ball["cy"])

        # bounce back at the edges
        if (x <= 20 or x >= 80): dx = -dx
        if (y <= 20 or y >= 80): dy = -dy

        # move the ball
        x += dx
        y += dy
        ball["cx"] = str(x)
        ball["cy"] = str(y)

        # redraw image
        Dsp.mycanvas.dom.update()
        
        # keep the animation running
        return True

   
    # animate every 100 milliseconds    
    add_timer(100, bounce)

  ]]>]]&gt;<![CDATA[</script>

</display>
  ]]></programlisting>

  <para>Please note that all properties of SVG elements are strings and have to
    be strings. That's why we need the conversions in the timer.</para>

</section>

</section>
