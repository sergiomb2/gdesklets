#
# Collection of various eye candy functions for the SideCandy displays.
#


# size settings; these shouldn't be changed
_WIDTH = Dsp.panel.width
_ICON_WIDTH = Unit(1.0, CM)
_PADDING = Unit(0.1, CM)
 
# sliding states
_SLIDE_IN = 0
_SLIDE_OUT = 1
_SLIDING = 2

# the current sliding state
_SLIDE_MODE = {}

# amount of cm which the desklet slides/iteration
_SLIDE_STEPS = 0.50


#
# Slide settings
#
SC_IN = _PADDING.as_cm() + _ICON_WIDTH.as_cm() + _PADDING.as_cm()
SC_OUT = _WIDTH.as_cm()

#
# user changeable settings
#
sc_side = "right"
sc_slide_timer = 30
sc_behavior = "click"
sc_border = "tmkt"
sc_border_left = True
sc_border_right = True
sc_border_top = True
sc_border_bottom = True
sc_on_top = "never"

#
# Handler for preferences. If you use your own handler, remember to call this
# handler in it.
#
def sc_prefs_cb(key, value):

    if (key == "sc_side"):
        _set_side(value)

    elif (key == "sc_border"):
        _set_border(value)

    elif (key in ("sc_border_left", "sc_border_right",
                  "sc_border_top", "sc_border_bottom")):
        _set_border(sc_border)

    elif (key == "sc_on_top"):
        mode = _SLIDE_MODE.get(Dsp.slider.id, _SLIDE_OUT)
        if (value == "always"): _set_on_top(True)
        elif (value == "whenin" and mode == _SLIDE_IN): _set_on_top(True)
        elif (value == "whenout" and mode == _SLIDE_OUT): _set_on_top(True)
        else: _set_on_top(False)



#
# Slides the given widget in or out.
#
def slide(widget, s_in, s_out):
 
    mode = _SLIDE_MODE.get(widget.id, _SLIDE_OUT)
    if (mode == _SLIDING):
        return
 
    else:
        _SLIDE_MODE[widget.id] = _SLIDING
        if (mode == _SLIDE_IN):
            if (sc_on_top == "whenout"): _set_on_top(True)
            _slide_out(widget, s_in, s_out)
        elif (mode == _SLIDE_OUT):
            if (sc_on_top == "whenin"): _set_on_top(True)
            _slide_in(widget, s_out, s_in)
 

#
# Timer for sliding in.
#
def _slide_in(widget, frm, until):
 
    width = frm
    if (width - _SLIDE_STEPS >= until):
        width -= _SLIDE_STEPS
        widget.width = Unit(width, CM)
        add_timer(sc_slide_timer, _slide_in, widget, frm - _SLIDE_STEPS, until)
    else:
        widget.width = Unit(until, CM)
        _SLIDE_MODE[widget.id] = _SLIDE_IN
        set_config("slide_out", False)
        if (sc_on_top == "whenout"): _set_on_top(False)

#
# Timer for sliding out.
#
def _slide_out(widget, frm, until):
 
    width = frm
    if (width + _SLIDE_STEPS <= until):
        width += _SLIDE_STEPS
        widget.width = Unit(width, CM)
        add_timer(sc_slide_timer, _slide_out, widget, frm + _SLIDE_STEPS, until)
    else:
        widget.width = Unit(until, CM)
        _SLIDE_MODE[widget.id] = _SLIDE_OUT
        set_config("slide_out", True)
        if (sc_on_top == "whenin"): _set_on_top(False)

#
# Sets the given border theme.
#
def _set_border(name):

    pieces = ["w", "n", "e", "s",
              "nw", "ne", "se", "sw"]
    folder = "gfx/border-%s/" % name
    uris = [ folder + piece + ".png" for piece in pieces ]
    Dsp.border.border_uris = uris

    lt = sc_border_left and 5 or 0
    rt = sc_border_right and 5 or 0
    tp = sc_border_top and 5 or 0
    bt = sc_border_bottom and 5 or 0
    Dsp.border.border_width = [Unit(lt, PX), Unit(tp, PX),
                               Unit(rt, PX), Unit(bt, PX)]

    # set the window to the right width
    Dsp.win.width = _WIDTH + Unit(lt +rt, PX)


#
# Sets the panel orientation.
#
def _set_side(side):

    if (side == "left"):
        _set_left_side()
    else:
        _set_right_side()


#
# Sets the window flags.
#
def _set_on_top(value):

    if (value):
        Dsp.win.window_flags = ["sticky", "above"]
    else:
        Dsp.win.window_flags = ["sticky", "below"]



#
# Sets the panel to be left-sided.
#
def _set_left_side():
 
    Dsp.border.anchor="nw"
    Dsp.border.x = Unit(0, PERCENT)
    Dsp.panel.anchor = "ne"
    Dsp.panel.x = Unit(100, PERCENT)

    Dsp.icon_group.x = _WIDTH - _ICON_WIDTH - _PADDING

    Dsp.info_group.x = _PADDING
    Dsp.info_group.y = _PADDING


#
# Sets the panel to be right-sided.
#
def _set_right_side():
 
    Dsp.border.anchor="ne"
    Dsp.border.x = Unit(100, PERCENT)
    Dsp.panel.anchor = "nw"
    Dsp.panel.x = Unit(0, PERCENT)

    Dsp.icon_group.x = _PADDING

    Dsp.info_group.x = _PADDING + _ICON_WIDTH + _PADDING
    Dsp.info_group.y = _PADDING


# initial default settings
_set_side(sc_side)
_set_border(sc_border)

# remember last sliding state
if (not get_config("slide_out", True)): slide(Dsp.slider, SC_IN, SC_OUT)
